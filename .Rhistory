data.frame( R2 = R2(predictions, test_data_frame$Pup.Wean.Mass,
RMSE = RMSE(predictions, test_data_frame$Pup.Wean.Mass),
MAE = MAE(predictions, test_data_frame$Pup.Wean.Mass))
data.frame
summary = data.frame( R2 = R2(predictions, test_data_frame$Pup.Wean.Mass,
RMSE = RMSE(predictions, test_data_frame$Pup.Wean.Mass),
MAE = MAE(predictions, test_data_frame$Pup.Wean.Mass))
summary
summary = data.frame( R2 = R2(predictions, test_data_frame$Pup.Wean.Mass,
RMSE = RMSE(predictions, test_data_frame$Pup.Wean.Mass))
summary
summary = data.frame( R2 = R2(predicted_value_2, expected_value_2,
RMSE = RMSE(predicted_value_2, predicted_value_2))
summary
DID = data.frame( R2 = R2(predicted_value_2, expected_value_2,
RMSE = RMSE(predicted_value_2, predicted_value_2))
DID
DID = data.frame( R2 = R2(predicted_value_2, expected_value_2)
DID
Cross_Validation_Corrolation = cor (predicted_value_2, expected_value_2)
source("~/Desktop/IDPhD Classes/Stat 5620_Updated/Final Project/Proposal Presentation/Working Folder/Final Assignment/R-Script/Final Project_PB_March_22.R", echo=TRUE)
Cross_Validation_Corrolation = cor (predicted_value, expected_value)
Cross_Validation_Corrolation
test_data_frame$Pup.Wean.Mass
mutate ( R2 = cor^2 )
library(dplyr)
mutate ( R2 = cor^2 )
R2 = (Cross_Validation_Corrolation^2 )
R2
set.seed(1981)
GLMM_E = glmer(Pup.Wean.Mass ~  Diet.diversity + Dietary.energy.density + (1 | Dominant.prey.species)
, data = seal_data, family = gaussian)
model_cross = train(Pup.Wean.Mass ~  Diet.diversity + Dietary.energy.density + (1 | Dominant.prey.species), family = gaussian,
method = "lmer", data = seal_data, trControl = control_specs)
model_cross = train(Pup.Wean.Mass ~  Diet.diversity + Dietary.energy.density + (1 | Dominant.prey.species), family = gaussian,
method = "glmm", data = seal_data, trControl = control_specs)
model_cross = train(Pup.Wean.Mass ~  Diet.diversity + Dietary.energy.density + (Diet.diversity | Dominant.prey.species), family = gaussian,
method = "glmm", data = seal_data, trControl = control_specs)
train_data_frame = data_frame[index,]
test_data_frame = data_frame[-index,]
model_cross = train(Pup.Wean.Mass ~  Diet.diversity + Dietary.energy.density + (1 | Dominant.prey.species), family = gaussian,
method = "glmm", data = seal_data, trControl = control_specs)
model_cross = train(Pup.Wean.Mass ~  Diet.diversity + Dietary.energy.density + (1 | Dominant.prey.species), family = gaussian,
method = "glmmer", data = seal_data, trControl = control_specs)
model_cross = train(GLMM_E, family = gaussian,
method = "glmmer", data = seal_data, trControl = control_specs)
model_cross = train(Pup.Wean.Mass ~  Diet.diversity + Dietary.energy.density + (1 | Dominant.prey.species), family = gaussian,
method = "glmer", data = seal_data, trControl = control_specs)
model_cross
model_cros = train(Pup.Wean.Mass ~  Diet.diversity + Dietary.energy.density + (1 | Dominant.prey.species), family = gaussian,
method = "glmer", data = seal_data, trControl = control_specs)
model_cros
model_cross = train(Pup.Wean.Mass ~  Diet.diversity + Dietary.energy.density + (1 | Dominant.prey.species), family = gaussian,
method = "lmer", data = seal_data, trControl = control_specs)
model_cross = train(Pup.Wean.Mass ~  Diet.diversity + Dietary.energy.density + (1 | Dominant.prey.species),
method = "lmer", data = seal_data, trControl = control_specs)
model_cross = train(Pup.Wean.Mass ~ Dominant.prey.species + Diet.diversity, family = gaussian,
method = "glm", data = train_data_frame, trControl = control_specs)
model_cross
set.seed(1980)
model_cross = train(Pup.Wean.Mass ~ Dominant.prey.species + Diet.diversity, family = gaussian,
method = "glm", data = train_data_frame, trControl = control_specs)
print (model_cross)
varImp (model_cross)
predications = predict (model_cross, newdata = test_data_frame)
predications
test_data_frame
predicted_value <- (c(53.68369, 51.35064, 51.96753, 58.46629, 50.35432, 50.06986, 49.15978, 39.97458, 48.76934))
expected_value <- (c(50,56,45.5,55,48,63,53,38,40))
Cross_Validation_Corrolation = cor (predicted_value, expected_value)
Cross_Validation_Corrolation
R2 = (Cross_Validation_Corrolation^2 )
R2
model_cross = train(Pup.Wean.Mass ~  Diet.diversity + Dietary.energy.density + (1 | Dominant.prey.species),
method = "lmer", data = train_data_frame, trControl = control_specs)
improve.fit (GLMM_E, GLMM_F)
library(flexplot)
improve.fit (GLMM_E, GLMM_F)
install.packages("rdrr.io")
install.packages("dustinfife/fifer")
model_cross = train(Pup.Wean.Mass ~  Diet.diversity + Dietary.energy.density + (Diet.diversity | Dominant.prey.species),
method = "lmer", data = train_data_frame, trControl = control_specs)
setwd("~/Desktop/IDPhD Classes/Stat 5620_Updated/Final Project/Proposal Presentation/Working Folder/Final Assignment/Processed_Data")
seal_data = read.csv("Data_Q2.csv", header = T)
summary(seal_data)
GLMM_E = glmer(Pup.Wean.Mass ~  Diet.diversity + Dietary.energy.density + (1 | Dominant.prey.species)
, data = seal_data, family = gaussian)
require(lme4)
GLMM_E = glmer(Pup.Wean.Mass ~  Diet.diversity + Dietary.energy.density + (1 | Dominant.prey.species)
, data = seal_data, family = gaussian)
res =resid(GLMM_E)
plot(fitted(GLMM_E),res)
abline(0,0)
GLMM_F = glmer(Pup.Wean.Mass ~  Diet.diversity + (1 | Dominant.prey.species)
, data = seal_data, family = gaussian)
summary(GLMM_F)
res_2 =resid(GLMM_F)
plot(fitted(GLMM_F),res_2)
abline(0,0)
GLM_Final = glm(seal_data$Pup.Wean.Mass ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity, family = gaussian)
res_3 =resid(GLM_Final)
res_3 =resid(GLM_Final)
plot(fitted(GLM_Final),res_3)
abline(0,0)
model.comparison(linear, glm_gaussian)
require(RRPP)
model.comparison(GLMM_D, GLM_Final)
require(flexplot)
model.comparison(linear, glm_gaussian)
linear <- lm (y ~ x, data = hubble)
---
title: Assignment 4
---
title: Assignment 4
require (hubble)
library(gamair)
data(hubble)
head(hubble)
names (hubble)
a = flexplot (y~1, data= hubble)
b = flexplot (x~1, data= hubble)
require (cowplot)
plot_grid(a,b)
attach(hubble)
require(ggplot2)
library(ggrepel)
library(showtext)
ggplot(hubble) + geom_point(aes(x,y, color = Galaxy)) +
labs(title = "Mass Change and Dietary Energy Density", x = "Dietary Energy Density (kJ/g of prey tissue)", y = "Mass Change (Kg)") +
geom_smooth(aes(x,y), method="lm", se=F)
linear <- lm (y ~ x, data = hubble)
linear
summary(linear)
linear_1 <- lm( y ~ x -1 , data = hubble)
linear_1
summary(linear_1)
glm_gaussian <- glm(y ~ x, data = hubble, family = gaussian)
summary (glm_gaussian)
res_2 <- resid(glm_gaussian)
plot(fitted(glm_gaussian), res_2)
abline(0,0)
glm_poisson <- glm(y ~ x, data = hubble, family = poisson)
summary (glm_poisson)
plot(glm_poisson)
glm_gamma <- glm(y ~ x, data = hubble, family = Gamma (link = log))
summary (glm_gamma)
model.comparison(linear, glm_gaussian)
model.comparison(glm_gaussian, glm_poisson)
model.comparison(glm_gaussian, glm_gamma)
model.comparison(glm_gaussian, glm_gamma, glm_poisson)
require(Mass)
require(MASS)
robust_linear = rlm(y~x, date=hubble)
robust_linear <- rlm (y ~ x, data = hubble)
robust_linear
model.comparison(linear, robust_linear)
robust_glm_gaussian <- rglm(y ~ x, data = hubble, family = gaussian)
robust_glm_gaussian <- glmrob(y ~ x, data = hubble, family = gaussian)
robust_glm_gaussian <- glmrob(y ~ x, data = hubble, family = gaussian)
require(robustbase)
robust_glm_gaussian <- glmrob(y ~ x, data = hubble, family = gaussian)
summary (glm_gaussian)
summary (robust_glm_gaussian)
model.comparison(glm_gaussian, robust_glm_gaussian)
robust_glm_gaussian <- glmrob(y ~ x, data = hubble, family = gaussian)
robust_glm_gaussian <- glmrob(y ~ x, data = hubble, family = poisson)
reduced_data = hubble %>%  filter(!row_number() %in% c(3, 15, 20))
reduced_data = hubble |> filter(!row_number() %in% c(3, 15, 20))
reduced_data = hubble [-c(3,15,20),]
reducted_data
reduced_data
hubble
reduced_data = hubble [-c(3,15,20),]
reduced_data
reduced_data = hubble [-c(3,15),]
reduced_data
glm_gaussian_reduced <- glm(y ~ x, data = reduced_data, family = gaussian)
summary (glm_gaussian_reduced)
plot(glm_gaussian_reduced)
robust_glm_gaussian <- glmrob(y ~ x, data = hubble, family = poisson)
res_5 <- resid(glm_gaussian_reduced)
plot(fitted(glm_gaussian_reducted), res_5)
res_5 <- resid(glm_gaussian_reduced)
plot(fitted(glm_gaussian_reduced), res_5)
abline(0,0)
# residuals vs fit
res_2 <- resid(glm_gaussian)
plot(fitted(glm_gaussian), res_2)
abline(0,0)
model.comparison(glm_gaussian, glm_gaussian_reduced)
glm_gaussian <- glm(y ~ x, data = hubble, family = gaussian)
summary (glm_gaussian)
model.comparison(glm_gaussian, glm_gaussian_reduced)
robust_glm_gaussian <- glmrob(y ~ x, data = hubble, family = poisson)
reduced_data
glm_gaussian_reduced <- glm(y ~ x, data = reduced_data, family = gaussian)
summary (glm_gaussian_reduced)
library(mgcv)
gam_model = gam(y ~ s(x), data = hubble
summary (gam_model)
gam_model = gam(y ~ s(x), data = hubble
summary (gam_model)
gam_model
gam_model = gam(y ~ s(x), data = hubble
gam_model = gam(y ~ s(x), data = hubble)
gam_model <- gam(y ~ s(x), data = hubble)
summary (gam_model)
linear <- lm (y ~ x, data = hubble)
linear
summary(linear)
model.comparison(linear, robust_linear)
gam_model <- gam(y ~ s(x), data = reducted_data)
gam_model <- gam(y ~ s(x), data = reduced_data)
summary (gam_model)
linear <- lm (y ~ x, data = reduced_data)
linear <- lm (y ~ x, data = hubble)
gam_model <- gam(y ~ s(x), data = hubble)
model.comparison(linear, gam_model)
summary (gam_model)
summary(linear)
summary (gam_model)
model.comparison(gam_model)
model.comparison(linear, gam_model)
library(mgcv)
gam_model <- gam(y ~ s(x), data = reduced_data)
summary (gam_model)
linear <- lm (y ~ x, data = reduced_data)
linear
summary(linear)
require (nlme)
load (Gun)
data (Gun)
gun_data = data (Gun)
gun_data
head (gun_data)
gun_data = data (Gun)
gun_data
data (Gun)
Gun
Gun_data = GUN
Gun_data = Gun
Gun_data
require (lme4)
names (Gun)
Gun
GLMM = lmer(rounds ~ Team + Physique + (Physique | Method)
GLMM
GLMM = lmer(rounds ~ Team + Physique + (Physique | Method)
GLMM = lmer(rounds ~ Team + Physique + (Physique | Method), data = Gun)
GLMM = lmer(rounds ~ Team + Physique + (Physique | Method), data = Gun))
GLMM = lmer(rounds ~ Team + Physique + (Physique | Method), data = Gun)
lmer(rounds ~ Team + Physique + (Physique | Method), data = Gun)
GLMM = lmer(rounds ~ Team + Method + (Method | Physique), data = Gun)
GLMM = lmer(rounds ~ Team + Physique + (Physique | Method), data = Gun)
GLMM = lmer(rounds ~ Team + Physique + (Physique | Method), data = Gun)
GLMM = lmer(rounds ~ Team +  (1 | Method) + (1 | Physique), data = Gun)
GLMM
lmer(rounds ~ Team + Physique + (Physique | Method), data = Gun)
lmer(rounds ~ Team +  (1 | Method) + (1 | Physique), data = Gun)
rounds = as.factor(rounds)
Method = as.factor(Method)
Gun$Method = as.factor(Gun$Method)
Gun$Physique = as.factor(Gun$Physique)
Gun$Method = as.factor(Gun$Method)
Gun$Physique = as.factor(Gun$Physique)
Gun$Method = as.factor(Gun$Method)
Gun$Physique = as.factor(Gun$Physique)
Gun$Team =. as.factor(Gun$Team)
Gun$Team = as.factor(Gun$Team)
GLMM = lmer(rounds ~ Team + Physique + (Physique | Method), data = Gun)
GLMM = lmer(rounds ~ Team +  (1 | Method) + (1 | Physique), data = Gun)
GLMM
summary(GLMM)
Gun
lmer(rounds ~ Team + Method + (Method | Physique), data = Gun)
GLMM_1 = lmer(rounds ~ Team + Physique + (Physique | Method), data = Gun)
GLMM_3 = lmer(rounds ~ Team +  (1 | Method + Physique), data = Gun)
GLMM_3 = lmer(rounds ~ Team +  (1 | Method + Physique) + (1 | Physique), data = Gun)
GLMM_3 = lmer(rounds ~ Team +  (1 | Method) + (1 | Physique), data = Gun)
summary(GLMM_3)
GLMM_3 = lmer(rounds ~ (1 | Method) + (1 | Physique), data = Gun)
summary(GLMM_3)
attach(Gun)
a = flexplot (rounds~1, data= hubble)
a = flexplot (Gun$rounds~1, data= hubble)
Gun
a = flexplot (rounds~1, data= Gun)
a
GLMM_1 = lmer(rounds ~ Team + Physique + (Physique | Method), family = poisson, data = Gun)
GLMM_1 = glmer(rounds ~ Team + Physique + (Physique | Method), family = poisson, data = Gun)
GLMM_1
GLMM_2 = glmer(rounds ~ Team + Method + (Method | Physique), family = poisson, data = Gun)
GLMM_2
GLMM_1 = glmer(rounds ~ Team + Physique + (Physique | Method), family = gamma(link = log), data = Gun)
GLMM_1 = glmer(rounds ~ Team + Physique + (Physique | Method), family = gamma, data = Gun)
GLMM_1 = glmer(rounds ~ Team + Physique + (Physique | Method), family = gamma(link = log), data = Gun)
GLMM_3 = glmer(rounds ~ (1 | Method) + (1 | Physique), family = gamma(link =log), data = Gun)
GLMM_3 = glmer(rounds ~ (1 | Method) + (1 | Physique), family = gamma(link = "log" ), data = Gun)
GLMM_3 = glmer(formula = rounds ~ Teams + (1 | Method) + (1 | Physique), family = gamma(link = "log" ), data = Gun)
GLMM_3 = glmer(formula = rounds ~ Teams + (1 | Method) + (1 | Physique), family = gamma(link = 'log' ), data = Gun)
GLMM_3 = glmer(formula = rounds ~ Teams + (1 | Method) + (1 | Physique), family = Gamma(link = 'log' ), data = Gun)
GLMM_3 = glmer(formula = rounds ~  (1 | Method) + (1 | Physique), family = Gamma(link = 'log' ), data = Gun)
Gun)
summary(GLMM_3)
GLMM_2 = glmer(formula = rounds ~ Team + Method + (Method | Physique), family = Gamma (link = log), data = Gun)
GLMM_2 = glmer(formula = rounds ~ Team + Method + (Method | Physique), family = Gamma (link = 'log'), data = Gun)
Summary(GLMM_2)
GLMM_4 = glmer(formula = rounds ~  Team + (1 | Method) + (1 | Physique), family = Gamma(link = 'log' ), data = Gun)
GLMM_4 = glmer(formula = rounds ~  (1 | Team + (1 | Method) + (1 | Physique), family = Gamma(link = 'log' ), data = Gun)
GLMM_3 = glmer(formula = rounds ~  (1 | Method) + (1 | Physique), family = Gamma(link = 'log' ), data = Gun)
GLMM_4 = glmer(formula = rounds ~ (1| Team) + (1 | Method) + (1 | Physique), family = Gamma(link = 'log' ), data = Gun)
summary(GLMM_4)
summary(GLMM_3)
GLMM_4 = glmer(formula = rounds ~ (1| Team) + (1 | Method) + (1 | Physique),
family = Gamma(link = 'log' ), data = Gun)
summary(GLMM_4)
res_3 <- resid(GLMM_3)
res_3 <- resid(GLMM_3)
plot(fitted(GLMM_3), res_3)
res_4 <- resid(GLMM_4)
plot(fitted(GLMM_4), res_4)
GLMM_5 = glmer(formula = rounds ~ (1| Team) + (1 | Method) + (1 | Physique),
family = Poisson, data = Gun)
GLMM_5 = glmer(formula = rounds ~ (1| Team) + (1 | Method) + (1 | Physique),
family = Poisson, data = Gun)
GLMM_5 = glmer(formula = rounds ~ (1| Team) + (1 | Method) + (1 | Physique),
family = poisson, data = Gun)
summary(GLMM_5)
GLMM_5 = glmer(formula = rounds ~ (1| Team) + (1 | Method) + (1 | Physique),
family = identity, data = Gun)
GLMM_2 = glmer(formula = rounds ~ Team + Method + (Method | Physique), family = Gamma (link = 'log'), data = Gun)
GLMM_5 = glmer(formula = rounds ~ Team + (1 | Method) + (1 | Physique),
family = Gamma(link = 'log' ), data = Gun)
summary(GLMM_5)
summary(GLMM_5)
summary(GLMM_4)
lme(formula = rounds ~  (1 | Method) + (1 | Physique), family = Gamma(link = 'log' ), data = Gun)
GLMM_3 = glmer(formula = rounds ~  Team + Method (1 + Method | Physique), family = Gamma(link = 'log' ), data = Gun)
GLMM_3 = glmer(formula = rounds ~  Team + Method + (1 + Method | Physique), family = Gamma(link = 'log' ), data = Gun)
GLMM_2 = glmer(formula = rounds ~  Team + Method + (1 + Method | Physique), family = Gamma(link = 'log' ), data = Gun)
summary(GLMM_2)
GLMM_2 = glmer(formula = rounds ~  Team + Method + (1 + Method | Physique),
family = Gamma(link = 'log' ), data = Gun)
summary(GLMM_2)
res_2 <- resid(GLMM_2)
plot(fitted(GLMM_2), res_2)
GLMM_1 = glmer(formula = rounds ~  Team + Physique + (1 + Physique | Method),
family = Gamma(link = 'log' ), data = Gun)
summary(GLMM_1)
res_1 <- resid(GLMM_1)
plot(fitted(GLMM_1), res_1)
abline(0,0)
res_2 <- resid(GLMM_2)
plot(fitted(GLMM_2), res_2)
abline(0,0)
GLMM_2 = glmer(formula = rounds ~  Team + Method + (1 + Method | Physique),
family = Gamma(link = 'log' ), data = Gun)
summary (GLMM_2)
set.seed(985)
n<- 40
x<- runif(n, min = -2, max = 2) + rnorm(n, mean = 0, sd = 3)
y<- rgamma(n = n, shape = 0.2, scale = 3) |> (\(z) z + 1.3 * x)() |>
(\(z) z %% (2 * pi))()
x
y
data.frame  (x,y)
Circle_data = data.frame  (x,y)
circle_data = data.frame  (x,y)
circle_date
circle_data
require(flexplot)
a = flexplot (y~1, data= circle_data)
a
a = flexplot (y~1, data= circle_data)
b = flexplot (x~1, data= circle_data)
b
a
circle_data
mean (x)
linear_mean = mean(x)
linear_mean
linear_mean = mean(y)
linear_mean = mean(y)
linear_mean
linear_median = median(y)
linear_median
linear_median
require (CircStats)
require (CircStats)
library("CircStats")
install.packages("CircStat")
library("Circular")
library(tectonicr)
install.packages("circular")
library(circular)
library(circular)
y.circular = circular(y, units = "radians", modula = "2pi")
y.circular = circular(y, units = "radians")
mean(y.(circular)
circular_mean = mean(y.(circular)
circular_mean = mean(y.circular)
circular_mean
circ_mean(y)
circular_median = median(y.circular)
circular_median = median(y.circular)
circular_median
circular_median = median(y.circular)
circular_median
circle_data_2 = data.frame  (x,y.circular)
circle_data_2
circle_data_2
require(flexplot)
a = flexplot (y.circular~1, data= circle_data_2)
a
y
y.circular
require (ggplot)
require (ggplot2)
ggplot(circle_data_2, aes(x = Angle, y = Frequency)) +
coord_polar(theta = "x", start = -pi/45) +
geom_bar(stat = "identity") +
scale_x_continuous(breaks = seq(0, 360, 60))
require (ggplot2)
ggplot(circle_data_2, aes(x = Angle, y = Frequency)) +
coord_polar(theta = "x", start = -pi/45) +
scale_x_continuous(breaks = seq(0, 360, 60))
ggplot(circle_data_2, aes(x, y)) +
coord_polar(theta = "x", start = -pi/45) +
geom_bar(stat = "identity") +
scale_x_continuous(breaks = seq(0, 360, 60))
y <- rose.diag(x, bins=18, prop=1.5, shrink=1.5)
y <- rose.diag(x, bins=18) # Points fall out of bounds.
points(x, plot.info=y, stack=TRUE)
y <- rose.diag(y.circular, bins=18, prop=1.5,
rose.diag(y.circular, bins=18, prop=1.5, shrink=1.5)
rose diagram <- rose.diag(y.circular, bins=18, prop=1.5, shrink=1.5)
points(x, plot.info=y, stack=TRUE)
rose_diagram = rose.diag(y.circular, bins=18, prop=1.5, shrink=1.5)
rose_diagram
rose_diagram = rose.diag(y.circular, bins=18, prop=1.5, shrink=.5)
rose_diagram = rose.diag(y.circular, bins=40, prop=1.5, shrink=.5)
rose_diagram = rose.diag(y.circular, bins=40, prop=1.5, shrink=1)
rose_diagram = rose.diag(y.circular, bins=40, prop=1, shrink=1)
rose_diagram = rose.diag(y.circular, bins=40, prop=3, shrink=1)
rose_diagram = rose.diag(y.circular, bins=40, prop=3, shrink=1, col=RED)
rose_diagram = rose.diag(y.circular, bins=40, prop=3, shrink=1, col= XXX)
rose_diagram = rose.diag(y.circular, bins=40, prop=3, shrink=1, col= cyan)
rose_diagram = rose.diag(y.circular, bins=40, prop=3, shrink=1)
rose_diagram = rose.diag(y.circular, bins=40, prop=3, shrink=1, col = 2)
attached (circle_data_2)
attach(circle_data_2)
circle_data_2
requre(ggplot2)
require(ggplot2)
ggplot(circle_data_2, aes(x, y.circular)) +
geom_point()
linear_circular = lm(x,y.circular, data = circle_data_2)
linear_circular = lm(x~y, data = circle_data_2)
linear_circular = lm(y~x, data = circle_data_2)
circle_data_2
linear_circular = lm(y.circular ~x, data = circle_data_2)
summary (linear_circular)
res_circular_linear <- resid(linear_circular)
plot(fitted(linear_circular), res_circular_linear)
abline(0,0)
rose_diagram = rose.diag(y.circular, bins=40, prop=3, shrink=1, col = 2)
circular_model = lm.circular(x=x,y = y.circular, type = c-l)
circular_model = lm.circular(x=x,y = y.circular)
circular_model = lm.circular.cl(x=x,y = y.circular)
circular_model = lm.circular(x=x,y = y.circular)
summary (circular_model)
res_circular_linear <- resid(circular_model)
plot(fitted(circular_model), res_circular_linear)
abline(0,0)
plot (circular_model)
compair.model(circular_model, linear_circular )
compare.model(circular_model, linear_circular )
anova(circular_model, linear_circular)
attach (circle_data_2)
circular_model = lm.circular(x=circle_data_2$x,y = circle_data_2$y.circular)
summary (circular_model)
covariants(circular_model)
print(circular_model)
circular_model_2 = glm(y~x, data = circle_data_2, family = multinomial(link ="softmax") )
circular_model_2 = glm(y~x, data = circle_data_2, family = multinomial(link ="softmax") )
circular_model_2 = glm(y~x, data = circle_data_2, family = multilogitlink())
circular_model_2 = glm(y~x, data = circle_data_2, family = multilogitlink)
circular_model_2 = glm(y~x, data = circle_data_2, family = multilogitlink)
circular_model_2 = glm(y~x, data = circle_data_2, family = multilogitlink)
print(circular_model)
circular_model = lm.circular.cl(x=circle_data_2$x,y = circle_data_2$y.circular)
glm_gaussian <- glm(circle_data_2$y.circular~ circle_data_2$x, data = circle_data_2, family = binomial)
glm_gaussian <- glm(circle_data_2$y.circular~ circle_data_2$x, data = circle_data_2, family = gamma)
require (nlme)
cicular_mixed = glmer(formula = circle_data_2$y.circular ~  circle_data_2$x,
family = Gamma(link = 'log' ), data = circle_data_2)
cicular_mixed = glmer(formula = circle_data_2$y.circular ~  (1 | circle_data_2$x), family = Gamma(link = 'log' ), data = circle_data_2)
summary(cicular_mixed)
cicular_mixed = glmer(formula = circle_data_2$y.circular ~  (1 | circle_data_2$x), family = Identity, data = circle_data_2)
cicular_mixed = glmer(formula = circle_data_2$y.circular ~  (1 | circle_data_2$x), family = multinomial, data = circle_data_2)
cicular_mixed = glmer(formula = circle_data_2$y.circular ~  (1 | circle_data_2$x), family = poisson, data = circle_data_2)
summary(cicular_mixed_1)
cicular_mixed_1 = glmer(formula = circle_data_2$y.circular ~  (1 | circle_data_2$x), family = Gamma, data = circle_data_2)
summary(cicular_mixed_1)
install.packages ("nnet")
require (nnet)
circular_multinomial = multinom(circle_data_2$y.circular ~  circle_data_2$x,
data = circle_data_2))
circular_multinomial = multinom(circle_data_2$y.circular ~  circle_data_2$x,
data = circle_data_2)
summary (circular_multinomial)
summary (circular_model)
