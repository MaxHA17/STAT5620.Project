coefCa <- exp(coefCa+int)
CaP <- ((coefCa/intE)*100)-100
CaP <- round(CaP,2)
CaP
coefPo <- pup_mod2$coefficients['DomSppPollock']
coefPo <- exp(coefPo+int)
PoP <- ((coefPo/intE)*100)-100
PoP <- round(PoP,2)
PoP
coefDiv <- pup_mod2$coefficients['DietDiv']
coefDiv <- exp(coefDiv+int)
DivP <- ((coefDiv/intE)*100)-100
DivP <- round(DivP,2)
DivP
pup_mod2 <- glm(formula = WeanMass ~ DietDiv + DomSpp, family = Gamma(link = "log"),
data = Data_Q2)
summary(pup_mod2)
#Scale location and q-q plot have some concerning values, particularly near the high tail.
#Try a gamma distribution
pup_mod <- glm(data=Data_Q2, family = Gamma(link="log"), formula = WeanMass ~ DietDiv + DietEngDen + MomAge +  Year + PupSex + DomSpp)
summary(pup_mod)
par(mfrow = c(2, 2))
plot(pup_mod)
#Load the data
library(readr)
Data_Q1 <- read_csv("Processed_Data/Data_Q1.csv")
View(Data_Q1)
#Ensure the data types are correctly assigned
Data_Q1$MomID <- as.factor(Data_Q1$MomID)
Data_Q1$Year <- as.factor(Data_Q1$Year)
Data_Q1$`Dominant prey species`<- as.character(Data_Q1$`Dominant prey species`)
Data_Q1$`Diet diversity` <- as.numeric(Data_Q1$`Diet diversity`)
Data_Q1$`Dietary energy density` <- as.numeric(Data_Q1$`Dietary energy density`)
summary(Data_Q1)
#rename columns
library(dplyr)
Data_Q1 <- Data_Q1 %>%
rename(
DietEngDen = `Dietary energy density`,
DietDiv = `Diet diversity`,
DomSpp = `Dominant prey species`,
MassChange = `Mass change`)
#Check number of observations for each dominant prey species
table(Data_Q1$DomSpp)
#remove white hake since there is only 1 observation
Data_Q1 <- Data_Q1 %>%
filter(DomSpp != "WhiteHake")
mom_mod <- glm(data=Data_Q1, family = gaussian(link="identity"), formula = MassChange ~ DietDiv + DietEngDen + Year + DomSpp)
#The q-q plot suggests model fit is not great. The values cannot be log transformed because many are negative. Try adding a constant value (the largest negative number) to all mass values
Data_1 <- Data_Q1
Data_1$MassChange <- Data_Q1$MassChange + 50
#Repated the analysis with a log link function
mom_mod <- glm(data=Data_1, family = gaussian(link="log"), formula = MassChange ~ DietDiv + (1+DietEngDen) + Year + DomSpp)
summary(mom_mod)
mom_mod2 <- glm(formula = MassChange ~ DietDiv + Year + DomSpp, family = gaussian(link = "log"),
data = Data_1)
summary(mom_mod2)
library(readr)
Data_Q1 <- read_csv("Processed_Data/Data_Q1.csv")
View(Data_Q1)
#Ensure the data types are correctly assigned
Data_Q1$MomID <- as.factor(Data_Q1$MomID)
#Data_Q1$Year <- as.factor(Data_Q1$Year)
Data_Q1$`Dominant prey species`<- as.character(Data_Q1$`Dominant prey species`)
Data_Q1$`Diet diversity` <- as.numeric(Data_Q1$`Diet diversity`)
Data_Q1$`Dietary energy density` <- as.numeric(Data_Q1$`Dietary energy density`)
summary(Data_Q1)
#rename columns
library(dplyr)
Data_Q1 <- Data_Q1 %>%
rename(
DietEngDen = `Dietary energy density`,
DietDiv = `Diet diversity`,
DomSpp = `Dominant prey species`,
MassChange = `Mass change`)
#Check number of observations for each dominant prey species
table(Data_Q1$DomSpp)
#remove white hake since there is only 1 observation
Data_Q1 <- Data_Q1 %>%
filter(DomSpp != "WhiteHake")
mom_mod <- glm(data=Data_Q1, family = gaussian(link="identity"), formula = MassChange ~ DietDiv + DietEngDen + Year + DomSpp)
summary(mom_mod)
#The initial model suggests that individuals with capelin or pollock as the dominant prey species gain less mass during foraging. Note that these were the species with few observations.
#Check residuals
par(mfrow = c(2, 2))
plot(mom_mod)
Data_1 <- Data_Q1
Data_1$MassChange <- Data_Q1$MassChange + 50
#Repated the analysis with a log link function
mom_mod <- glm(data=Data_1, family = gaussian(link="log"), formula = MassChange ~ DietDiv + (1+DietEngDen) + Year + DomSpp)
summary(mom_mod)
par(mfrow = c(2, 2))
plot(mom_mod)
mom_mod2 <- glm(formula = MassChange ~ DietDiv + Year + DomSpp, family = gaussian(link = "log"),
data = Data_1)
summary(mom_mod2)
plot(mom_mod2)
library(readr)
Data_Q1 <- read_csv("Processed_Data/Data_Q1.csv")
View(Data_Q1)
#Ensure the data types are correctly assigned
Data_Q1$MomID <- as.factor(Data_Q1$MomID)
#Data_Q1$Year <- as.factor(Data_Q1$Year)
Data_Q1$`Dominant prey species`<- as.character(Data_Q1$`Dominant prey species`)
Data_Q1$`Diet diversity` <- as.numeric(Data_Q1$`Diet diversity`)
Data_Q1$`Dietary energy density` <- as.numeric(Data_Q1$`Dietary energy density`)
summary(Data_Q1)
#rename columns
library(dplyr)
Data_Q1 <- Data_Q1 %>%
rename(
DietEngDen = `Dietary energy density`,
DietDiv = `Diet diversity`,
DomSpp = `Dominant prey species`,
MassChange = `Mass change`)
#Check number of observations for each dominant prey species
table(Data_Q1$DomSpp)
#remove white hake since there is only 1 observation
Data_Q1 <- Data_Q1 %>%
filter(DomSpp != "WhiteHake")
mom_mod <- glm(data=Data_Q1, family = gaussian(link="identity"), formula = MassChange ~ DietDiv + DietEngDen + Year + DomSpp)
summary(mom_mod)
par(mfrow = c(2, 2))
plot(mom_mod)
Data_Q1$MomID <- as.factor(Data_Q1$MomID)
Data_Q1$Year <- as.factor(Data_Q1$Year)
Data_Q1$`Dominant prey species`<- as.character(Data_Q1$`Dominant prey species`)
Data_Q1 <- read_csv("Processed_Data/Data_Q1.csv")
View(Data_Q1)
#Ensure the data types are correctly assigned
Data_Q1$MomID <- as.factor(Data_Q1$MomID)
Data_Q1$Year <- as.factor(Data_Q1$Year)
Data_Q1$`Dominant prey species`<- as.character(Data_Q1$`Dominant prey species`)
Data_Q1$`Diet diversity` <- as.numeric(Data_Q1$`Diet diversity`)
Data_Q1$`Dietary energy density` <- as.numeric(Data_Q1$`Dietary energy density`)
summary(Data_Q1)
#rename columns
library(dplyr)
Data_Q1 <- Data_Q1 %>%
rename(
DietEngDen = `Dietary energy density`,
DietDiv = `Diet diversity`,
DomSpp = `Dominant prey species`,
MassChange = `Mass change`)
#Check number of observations for each dominant prey species
table(Data_Q1$DomSpp)
#remove white hake since there is only 1 observation
Data_Q1 <- Data_Q1 %>%
filter(DomSpp != "WhiteHake")
mom_mod <- glm(data=Data_Q1, family = gaussian(link="identity"), formula = MassChange ~ DietDiv + DietEngDen + Year + DomSpp)
summary(mom_mod)
par(mfrow = c(2, 2))
plot(mom_mod)
mom_mod2 <- glm(formula = MassChange ~ DietDiv + Year + DomSpp, family = gaussian(link = "log"),
data = Data_1)
summary(mom_mod2)
plot(mom_mod2)
Data_Q1$Year <- factor(Data_Q1$Year, levels = sort(unique(Data_Q1$Year)), ordered = TRUE)
Data_Q1 <- read_csv("Processed_Data/Data_Q1.csv")
View(Data_Q1)
#Ensure the data types are correctly assigned
Data_Q1$MomID <- as.factor(Data_Q1$MomID)
Data_Q1$Year <- factor(Data_Q1$Year, levels = sort(unique(Data_Q1$Year)), ordered = TRUE)
Data_Q1$`Dominant prey species`<- as.character(Data_Q1$`Dominant prey species`)
Data_Q1$`Diet diversity` <- as.numeric(Data_Q1$`Diet diversity`)
Data_Q1$`Dietary energy density` <- as.numeric(Data_Q1$`Dietary energy density`)
summary(Data_Q1)
#rename columns
library(dplyr)
Data_Q1 <- Data_Q1 %>%
rename(
DietEngDen = `Dietary energy density`,
DietDiv = `Diet diversity`,
DomSpp = `Dominant prey species`,
MassChange = `Mass change`)
#Check number of observations for each dominant prey species
table(Data_Q1$DomSpp)
#remove white hake since there is only 1 observation
Data_Q1 <- Data_Q1 %>%
filter(DomSpp != "WhiteHake")
mom_mod <- glm(data=Data_Q1, family = gaussian(link="identity"), formula = MassChange ~ DietDiv + DietEngDen + Year + DomSpp)
summary(mom_mod)
par(mfrow = c(2, 2))
plot(mom_mod)
Data_1 <- Data_Q1
Data_1$MassChange <- Data_Q1$MassChange + 50
#Repeat the analysis with a log link function
mom_mod <- glm(data=Data_1, family = gaussian(link="log"), formula = MassChange ~ DietDiv + (1+DietEngDen) + Year + DomSpp)
summary(mom_mod)
par(mfrow = c(2, 2))
plot(mom_mod)
mom_mod2 <- glm(formula = MassChange ~ DietDiv + Year + DomSpp, family = gaussian(link = "log"),
data = Data_1)
summary(mom_mod2)
plot(mom_mod2)
coef_estimates <- coef(summary(mom_mod2))[, "Estimate"]
response_scale_coefs <- exp(coef_estimates)
print(response_scale_coefs)
##Transform coefficient estimates back to the response scale
#take and transofrm the intercept
int <- mom_mod2$coefficients['(Intercept)']
intE <- exp(int)
summary(mom_mod2)
#Redfish
coefRed <- mom_mod2$coefficients['DomSppRedfish']
coefRed <- exp(coefRed+int)
RedfishP <- ((coefRed/intE)*100)-100
RedfishP <- round(RedfishP,2)
RedfishP
#Sand lance
coefSa <- mom_mod2$coefficients['DomSppNorthernSandlance']
coefSa <- exp(coefSa+int)
SandP <- ((coefSa/intE)*100)-100
SandP <- round(SandP,2)
SandP
#Capelin
coefCa <- mom_mod2$coefficients['DomSppCapelin']
coefCa <- exp(coefCa+int)
CaP <- ((coefCa/intE)*100)-100
CaP <- round(CaP,2)
CaP
#Pollock
coefPo <- mom_mod2$coefficients['DomSppPollock']
coefPo <- exp(coefPo+int)
PoP <- ((coefPo/intE)*100)-100
PoP <- round(PoP,2)
PoP
#Diet diversity
coefDiv <- mom_mod2$coefficients['DietDiv']
coefDiv <- exp(coefDiv+int)
DivP <- ((coefDiv/intE)*100)-100
DivP <- round(DivP,2)
DivP
#Load the data
library(readr)
Data_Q1 <- read_csv("Processed_Data/Data_Q1.csv")
View(Data_Q1)
#Ensure the data types are correctly assigned
Data_Q1$MomID <- as.factor(Data_Q1$MomID)
Data_Q1$Year <- factor(Data_Q1$Year, levels = sort(unique(Data_Q1$Year)), ordered = TRUE)
Data_Q1$`Dominant prey species`<- as.character(Data_Q1$`Dominant prey species`)
Data_Q1$`Diet diversity` <- as.numeric(Data_Q1$`Diet diversity`)
Data_Q1$`Dietary energy density` <- as.numeric(Data_Q1$`Dietary energy density`)
summary(Data_Q1)
#rename columns
library(dplyr)
Data_Q1 <- Data_Q1 %>%
rename(
DietEngDen = `Dietary energy density`,
DietDiv = `Diet diversity`,
DomSpp = `Dominant prey species`,
MassChange = `Mass change`)
hist(Data_Q1$MassChange)
table(Data_Q1$DomSpp)
Data_Q1 <- Data_Q1 %>%
filter(DomSpp != "WhiteHake")
Data_Q1 <- Data_Q1 %>%
filter(DomSpp != "Capelin")
library(STAT5620.Project)
plot_explore(Data_Q1, response = "MassChange",
continuous_vars = c("DietEngDen", "DietDiv"),
categorical_vars = c("Year", "DomSpp"))
library(lme4)
mom_mod <- glm(data=Data_Q1, family = gaussian(link="identity"), formula = MassChange ~ DietDiv + DietEngDen + Year + DomSpp)
summary(mom_mod)
library(lme4)
mom_mod <- glm(data=Data_Q1, family = gaussian(link="identity"), formula = MassChange ~ DietDiv + DietEngDen + Year + DomSpp)
plot(mom_mod)
View(Data_Q1)
library(lme4)
mom_mod <- glm(data=Data_Q1, family = gaussian(link="identity"), formula = MassChange ~ DietDiv + DietEngDen + Year + DomSpp)
par(mfrow = c(2, 2))
plot(mom_mod)
step(mom_mod, direction = "both")
mom_mod2 <- glm(formula = MassChange ~ DietDiv + Year + DomSpp, family = gaussian(link = "identity"),
data = Data_Q1)
plot(mom_mod2)
summary(mom_mod2)
ggplot(Data_Q1, aes(x = DomSpp, y = MassChange, fill = DomSpp)) +
geom_boxplot() +
stat_summary(
fun = "mean", geom = "errorbar",
aes(ymax = ..y.., ymin = ..y..),
width = 0.75, color = "red", size = 1.2
) + geom_text(x = "Pollock", y = 20, label = "*",
aes(x = x, y = y, label = label),
color = "black", size = 6, fontface = "bold"
) +
labs(
title = "Median (black line) mean (red line) mass change by dominant prey species",
x = "Prey species",
y = "Mass change (kg)", fill = "Dominant prey species"
) +
theme_minimal() + theme(
axis.line = element_line(color = "black", size = 1),  # Add axis lines
axis.text.x = element_text(size = 12, angle = 45, hjust = 1)
) +
scale_y_continuous(
breaks = seq(0, max(Data_Q1$MassChange), by = 25) - 50
)
library(caret)
#cv_control <- trainControl(method = "cv", number = 10)
# Train the model with cross-validation
cv_model <- train(
mpg ~ wt + hp,
data = mtcars,
method = "glm",
family = gaussian(),
trControl = cv_control
)
library(caret)
#cv_control <- trainControl(method = "cv", number = 10)
# Train the model with cross-validation
CV <- train(MassChange ~ DietDiv + Year + DomSpp, family = gaussian(link = "identity"), data = Data_Q1, trControl = trainControl(method = "cv", number = 10))
# Print cross-validation results
print(CV)
CV$results  # Shows RMSE, R-squared, etc.
library(caret)
#cv_control <- trainControl(method = "cv", number = 10)
# Train the model with cross-validation
CV <- train(MassChange ~ DietDiv + Year + DomSpp, family = gaussian(link = "identity"), data = Data_Q1, trControl = trainControl(method = "cv", number = 7))
# Print cross-validation results
print(CV)
CV$results  # Shows RMSE, R-squared, etc.
library(caret)
#cv_control <- trainControl(method = "cv", number = 10)
# Train the model with cross-validation
CV <- train(MassChange ~ DietDiv + Year + DomSpp, family = gaussian(link = "identity"), data = Data_Q1, trControl = trainControl(method = "cv", number = 7))
# Print cross-validation results
CV
#CV$results  # Shows RMSE, R-squared, etc.
set.seed(123)
# Define number of folds
k <- 7
# Shuffle and split data into folds
DatCV <- Data_Q1 %>% mutate(fold = sample(rep(1:k, length.out = n())))
# Create a vector to store RMSE for each fold
rmse_values <- numeric(k)
# Manual cross-validation loop
for (i in 1:k) {
# Split into training and testing sets
train_data <- DatCV %>% filter(fold != i)
test_data  <- DatCV %>% filter(fold == i)
# Fit the model on training data
modCV <- glm(MassChange ~ DietDiv + Year + DomSpp, family = gaussian(link = "identity"), data = Data_Q1)
# Predict on the test data
predictions <- predict(modCV, newdata = test_data)
# Compute RMSE for this fold
actuals <- test_data$mMassChange
rmse_values[i] <- sqrt(mean((predictions - actuals)^2))
}
# Show RMSE for each fold and the average RMSE
rmse_values
mean_rmse <- mean(rmse_values)
cat("Average RMSE across", k, "folds:", round(mean_rmse, 2), "\n")
set.seed(123)
# Define number of folds
k <- 7
# Shuffle and split data into folds
DatCV <- Data_Q1 %>% mutate(fold = sample(rep(1:k, length.out = n())))
# Create a vector to store RMSE for each fold
rmse_values <- numeric(k)
# Manual cross-validation loop
for (i in 1:k) {
# Split into training and testing sets
train_data <- DatCV %>% filter(fold != i)
test_data  <- DatCV %>% filter(fold == i)
# Fit the model on training data
modCV <- glm(MassChange ~ DietDiv + Year + DomSpp, family = gaussian(link = "identity"), data = Data_Q1)
# Predict on the test data
predictions <- predict(modCV, newdata = test_data)
# Compute RMSE for this fold
actuals <- test_data$MassChange
rmse_values[i] <- sqrt(mean((predictions - actuals)^2))
}
# Show RMSE for each fold and the average RMSE
rmse_values
mean_rmse <- mean(rmse_values)
cat("Average RMSE across", k, "folds:", round(mean_rmse, 2), "\n")
set.seed(123)
#Number of folds
k <- 7
# Split the data into folds
DatCV <- Data_Q1 %>% mutate(fold = sample(rep(1:k, length.out = n())))
# Create a vector to store RMSE for each fold
rmse_values <- numeric(k)
#Perform cross validation
for (i in 1:k) {
train_data <- DatCV %>% filter(fold != i)
test_data  <- DatCV %>% filter(fold == i)
# Fit the model on training data
modCV <- glm(MassChange ~ DietDiv + Year + DomSpp, family = gaussian(link = "identity"), data = Data_Q1)
# Predict on the test data
predictions <- predict(modCV, newdata = test_data)
# Compute RMSE for this fold
actuals <- test_data$MassChange
rmse_values[i] <- sqrt(mean((predictions - actuals)^2))
}
# Summarize
rmse_values
mean_rmse <- mean(rmse_values)
cat("Average RMSE across", k, "folds:", round(mean_rmse, 2), "\n")
set.seed(123)
#Number of folds
k <- 7
# Split the data into folds
DatCV <- Data_Q1 %>% mutate(fold = sample(rep(1:k, length.out = n())))
# Create a vector to store RMSE for each fold
rmse_values <- numeric(k)
#Perform cross validation
for (i in 1:k) {
train_data <- DatCV %>% filter(fold != i)
test_data  <- DatCV %>% filter(fold == i)
# Fit the model on training data
modCV <- glm(MassChange ~ DietDiv + Year + DomSpp, family = gaussian(link = "identity"), data = Data_Q1)
# Predict on the test data
predictions <- predict(modCV, newdata = test_data)
# Compute RMSE for this fold
actuals <- test_data$MassChange
rmse_values[i] <- sqrt(mean((predictions - actuals)^2))
}
# Summarize
rmse_values
mean_rmse <- mean(rmse_values)
cat("Average RMSE across", k, "folds:", round(mean_rmse, 2), "\n")
sd(Data_Q1$MassChange)
sd(Data_Q1$MassChange)
set.seed(123)
#Number of folds
k <- 7
# Split the data into folds
DatCV <- Data_Q1 %>% mutate(fold = sample(rep(1:k, length.out = n())))
# Create a vector to store RMSE for each fold
rmse_values <- numeric(k)
#Perform cross validation
for (i in 1:k) {
train_data <- DatCV %>% filter(fold != i)
test_data  <- DatCV %>% filter(fold == i)
# Fit the model on training data
modCV <- glm(MassChange ~ DietDiv + Year + DomSpp, family = gaussian(link = "identity"), data = Data_Q1)
# Predict on the test data
predictions <- predict(modCV, newdata = test_data)
# Compute RMSE for this fold
actuals <- test_data$MassChange
rmse_values[i] <- sqrt(mean((predictions - actuals)^2))
}
# Summarize
rmse_values
mean_rmse <- mean(rmse_values)
cat("Average RMSE across", k, "folds:", round(mean_rmse, 2), "\n")
mean(Data_Q1$MassChange)
fit_mom <- fitted(mom_mod2)
# Get the observed response variable (actual values)
obs_mom <- Data_Q1$MassChange
# Plot the fitted vs. observed values
ggplot(data = Data_Q1, aes(x = fit_mom1, y = obs_mom)) +
geom_point(color = "black") +
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +  # Add 1:1 line
labs(
title = "Figure 2. Fitted vs. Observed Values with 1:1 line",
x = "Fitted Values",
y = "Observed Values"
) +
theme_minimal()
fit_mom <- fitted(mom_mod2)
# Get the observed response variable (actual values)
obs_mom <- Data_Q1$MassChange
# Plot the fitted vs. observed values
ggplot(data = Data_Q1, aes(x = fit_mom, y = obs_mom)) +
geom_point(color = "black") +
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +  # Add 1:1 line
labs(
title = "Figure 2. Fitted vs. Observed Values with 1:1 line",
x = "Fitted Values",
y = "Observed Values"
) +
theme_minimal()
git add Q1_markdown.Rmd
#Load the data
library(readr)
Data_Q1 <- read_csv("Processed_Data/Data_Q1.csv")
#Load the data
library(readr)
Data_Q1 <- read_csv("Processed_Data/Data_Q1.csv")
setwd("~/STAT5620.Project")
#Load the data
library(readr)
Data_Q1 <- read_csv("Processed_Data/Data_Q1.csv")
setwd("~/STAT5620.Project")
#Load the data
library(readr)
Data_Q1 <- read_csv("Processed_Data/Data_Q1.csv")
#Load the data
library(readr)
Data_Q1 <- read_csv("Processed_Data/Data_Q1.csv")
setwd("~/STAT5620.Project/Processed_Data")
#Load the data
library(readr)
Data_Q1 <- read_csv("Processed_Data/Data_Q1.csv")
getwd()
setwd("~/STAT5620.Project/Processed_Data")
getwd()
#Load the data
library(readr)
Data_Q1 <- read_csv("Processed_Data/Data_Q1.csv")
#Load the data
library(readr)
Data_Q1 <- read_csv("Data_Q1.csv")
setwd("~/STAT5620.Project/Processed_Data")
#Load the data
library(readr)
Data_Q1 <- read_csv("Data_Q1.csv")
