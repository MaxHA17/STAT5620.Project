x = var, y = response) +
theme_minimal() +theme(
panel.border = element_rect(color = "black", fill = NA, linewidth = 1),
panel.spacing = unit(2, "lines"))
plots[[var]] <- p  # Add to list
}
}
# 2️⃣ Boxplots for Categorical Predictors
if (!is.null(categorical_vars)) {
categorical_vars <- categorical_vars[categorical_vars %in% valid_vars]  # Ensure categorical_vars are valid
for (var in categorical_vars) {
p <- ggplot(data_clean, aes_string(x = var, y = response)) +
geom_boxplot(fill = "lightblue", color = "black") +
labs(title = paste("Boxplot of", response, "by", var),
x = var, y = response) +
theme_minimal() +theme(
panel.border = element_rect(color = "black", fill = NA, linewidth = 1),
panel.spacing = unit(2, "lines"))
plots[[var]] <- p  # Add to list
}
}
# 3️⃣ Create a Composite Figure (Grid of All Plots)
if (length(plots) > 0) {
# Arrange plots in a grid layout
grid.arrange(grobs = plots, ncol = 2)  # Change ncol to adjust layout
} else {
message("No plots were created.")
}
return(plots)  # Return all plots in a list
}
plot_explore(mtcars, response = "mpg",
continuous_vars = c("hp", "wt", "disp"),
categorical_vars = c("cyl", "gear"))
see <- plot_explore(mtcars, response = "mpg", continuous_vars = c("hp", "wt", "disp"), categorical_vars = c("cyl", "gear"))
see
#'
#' @return A list of ggplot objects, one for each predictor variable plotted against the response.
#' @import ggplot2
#' @export
#'
#' @examples
#' # Example using the built-in mtcars dataset
#' plot_explore(mtcars, response = "mpg",
#'                 continuous_vars = c("hp", "wt", "disp"),
#'                 categorical_vars = c("cyl", "gear"))
plot_predictors <- function(data, response, continuous_vars = NULL, categorical_vars = NULL) {
library(ggplot2)  # Load ggplot2 for visualization
# Create an empty dataframe to store the plot data
plot_data <- data.frame()
# Ensure the response and selected variables exist in the dataframe
all_vars <- c(response, continuous_vars, categorical_vars)
valid_vars <- all_vars[all_vars %in% names(data)]  # Filter out non-existing variables
# Remove rows with NAs in the valid response and predictor variables
data_clean <- data[complete.cases(data[valid_vars]), ]
# 1️⃣ Scatterplots for Continuous Predictors
if (!is.null(continuous_vars)) {
continuous_vars <- continuous_vars[continuous_vars %in% valid_vars]  # Ensure continuous_vars are valid
for (var in continuous_vars) {
p <- ggplot(data_clean, aes_string(x = var, y = response)) +
geom_point(alpha = 0.6, color = "blue") +
geom_smooth(method = "lm", color = "red", se = FALSE) +
labs(title = paste("Scatterplot of", response, "vs", var),
x = var, y = response) +
theme_minimal() +
theme(legend.position = "none") +
# Add a column for the plot type (used in facet_wrap)
aes(facet = "Continuous Predictor")
plot_data <- rbind(plot_data, data.frame(plot_type = "continuous", variable = var, value = data_clean[[var]], response = data_clean[[response]]))
}
}
# 2️⃣ Boxplots for Categorical Predictors
if (!is.null(categorical_vars)) {
categorical_vars <- categorical_vars[categorical_vars %in% valid_vars]  # Ensure categorical_vars are valid
for (var in categorical_vars) {
p <- ggplot(data_clean, aes_string(x = var, y = response)) +
geom_boxplot(fill = "lightblue", color = "black") +
labs(title = paste("Boxplot of", response, "by", var),
x = var, y = response) +
theme_minimal() +
theme(legend.position = "none") +
aes(facet = "Categorical Predictor")
plot_data <- rbind(plot_data, data.frame(plot_type = "categorical", variable = var, value = data_clean[[var]], response = data_clean[[response]]))
}
}
# 3️⃣ Combine all the plots in one grid using facet_wrap
final_plot <- ggplot(plot_data, aes(x = value, y = response)) +
geom_point(alpha = 0.6, color = "blue") +
geom_smooth(method = "lm", color = "red", se = FALSE) +
facet_wrap(~plot_type, scales = "free_y", ncol = 2) +
theme_minimal()
return(final_plot)  # Return the combined plot with facet_wrap
}
see <- plot_explore(mtcars, response = "mpg", continuous_vars = c("hp", "wt", "disp"), categorical_vars = c("cyl", "gear"))
see <- plot_predictors(mtcars, response = "mpg", continuous_vars = c("hp", "wt", "disp"), categorical_vars = c("cyl", "gear"))
see
#'
#' @return A list of ggplot objects, one for each predictor variable plotted against the response.
#' @import ggplot2
#' @export
#'
#' @examples
#' # Example using the built-in mtcars dataset
#' plot_explore(mtcars, response = "mpg",
#'                 continuous_vars = c("hp", "wt", "disp"),
#'                 categorical_vars = c("cyl", "gear"))
plot_predictors <- function(data, response, continuous_vars = NULL, categorical_vars = NULL) {
library(ggplot2)  # Load ggplot2 for visualization
# Create an empty dataframe to store the plot data
plot_data <- data.frame()
# Ensure the response and selected variables exist in the dataframe
all_vars <- c(response, continuous_vars, categorical_vars)
valid_vars <- all_vars[all_vars %in% names(data)]  # Filter out non-existing variables
# Remove rows with NAs in the valid response and predictor variables
data_clean <- data[complete.cases(data[valid_vars]), ]
# 1️⃣ Scatterplots for Continuous Predictors
if (!is.null(continuous_vars)) {
continuous_vars <- continuous_vars[continuous_vars %in% valid_vars]  # Ensure continuous_vars are valid
for (var in continuous_vars) {
p <- ggplot(data_clean, aes_string(x = var, y = response)) +
geom_point(alpha = 0.6, color = "blue") +
geom_smooth(method = "lm", color = "red", se = FALSE) +
labs(title = paste("Scatterplot of", response, "vs", var),
x = var, y = response) +
theme_minimal() +
theme(legend.position = "none") +
# Add a column for the plot type (used in facet_wrap)
aes(facet = "Continuous Predictor")
plot_data <- rbind(plot_data, data.frame(plot_type = "continuous", variable = var, value = data_clean[[var]], response = data_clean[[response]]))
}
}
# 2️⃣ Boxplots for Categorical Predictors
if (!is.null(categorical_vars)) {
categorical_vars <- categorical_vars[categorical_vars %in% valid_vars]  # Ensure categorical_vars are valid
for (var in categorical_vars) {
p <- ggplot(data_clean, aes_string(x = var, y = response)) +
geom_boxplot(fill = "lightblue", color = "black") +
labs(title = paste("Boxplot of", response, "by", var),
x = var, y = response) +
theme_minimal() +
theme(legend.position = "none") +
aes(facet = "Categorical Predictor")
plot_data <- rbind(plot_data, data.frame(plot_type = "categorical", variable = var, value = data_clean[[var]], response = data_clean[[response]]))
}
}
# 3️⃣ Combine all the plots in one grid using facet_wrap
final_plot <- ggplot(plot_data, aes(x = value, y = response)) +
geom_point(alpha = 0.6, color = "blue") +
geom_smooth(method = "lm", color = "red", se = FALSE) +
facet_wrap(~plot_type, scales = "free_x", ncol = 4) +
theme_minimal() +theme(
panel.border = element_rect(color = "black", fill = NA, linewidth = 1),
panel.spacing = unit(2, "lines"))
return(final_plot)  # Return the combined plot with facet_wrap
}
plot_predictors(mtcars, response = "mpg", continuous_vars = c("hp", "wt", "disp"), categorical_vars = c("cyl", "gear"))
#'
#' @return A list of ggplot objects, one for each predictor variable plotted against the response.
#' @import ggplot2
#' @export
#'
#' @examples
#' # Example using the built-in mtcars dataset
#' plot_explore(mtcars, response = "mpg",
#'                 continuous_vars = c("hp", "wt", "disp"),
#'                 categorical_vars = c("cyl", "gear"))
plot_predictors <- function(data, response, continuous_vars = NULL, categorical_vars = NULL) {
library(ggplot2)  # Load ggplot2 for visualization
library(gridExtra)  # Load gridExtra for arranging plots
# Create an empty dataframe to store the plot data
plot_data <- data.frame()
# Ensure the response and selected variables exist in the dataframe
all_vars <- c(response, continuous_vars, categorical_vars)
valid_vars <- all_vars[all_vars %in% names(data)]  # Filter out non-existing variables
# Remove rows with NAs in the valid response and predictor variables
data_clean <- data[complete.cases(data[valid_vars]), ]
# 1️⃣ Scatterplots for Continuous Predictors
if (!is.null(continuous_vars)) {
continuous_vars <- continuous_vars[continuous_vars %in% valid_vars]  # Ensure continuous_vars are valid
for (var in continuous_vars) {
p <- ggplot(data_clean, aes_string(x = var, y = response)) geom_point(alpha = 0.6, color = "blue") +
#'
#' @return A list of ggplot objects, one for each predictor variable plotted against the response.
#' @import ggplot2
#' @export
#'
#' @examples
#' # Example using the built-in mtcars dataset
#' plot_explore(mtcars, response = "mpg",
#'                 continuous_vars = c("hp", "wt", "disp"),
#'                 categorical_vars = c("cyl", "gear"))
plot_predictors <- function(data, response, continuous_vars = NULL, categorical_vars = NULL) {
library(ggplot2)  # Load ggplot2 for visualization
library(gridExtra)  # Load gridExtra for arranging plots
plots <- list()  # Store plots
# Ensure the response and selected variables exist in the dataframe
all_vars <- c(response, continuous_vars, categorical_vars)
valid_vars <- all_vars[all_vars %in% names(data)]  # Filter out non-existing variables
# Remove rows with NAs in the valid response and predictor variables
data_clean <- data[complete.cases(data[valid_vars]), ]
# 1️⃣ Scatterplots for Continuous Predictors
if (!is.null(continuous_vars)) {
continuous_vars <- continuous_vars[continuous_vars %in% valid_vars]  # Ensure continuous_vars are valid
for (var in continuous_vars) {
p <- ggplot(data_clean, aes_string(x = var, y = response)) +
geom_point(alpha = 0.6, color = "blue") +
geom_smooth(method = "lm", color = "red", se = FALSE) +
labs(title = paste("Scatterplot of", response, "vs", var),
x = var, y = response) +
theme_minimal()
plots[[var]] <- p  # Add to list
}
}
# 2️⃣ Boxplots for Categorical Predictors
if (!is.null(categorical_vars)) {
categorical_vars <- categorical_vars[categorical_vars %in% valid_vars]  # Ensure categorical_vars are valid
for (var in categorical_vars) {
p <- ggplot(data_clean, aes_string(x = var, y = response)) +
geom_boxplot(fill = "lightblue", color = "black") +
labs(title = paste("Boxplot of", response, "by", var),
x = var, y = response) +
theme_minimal()
plots[[var]] <- p  # Add to list
}
}
# 3️⃣ Create a Composite Figure (Grid of All Plots)
if (length(plots) > 0) {
# Arrange plots in a grid layout
grid.arrange(grobs = plots, ncol = 2)  # Change ncol to adjust layout
} else {
message("No plots were created.")
}
return(plots)  # Return all plots in a list
}
plot_predictors(mtcars, response = "mpg", continuous_vars = c("hp", "wt", "disp"), categorical_vars = c("cyl", "gear"))
plots <- plot_predictors(mtcars, response = "mpg",
continuous_vars = c("hp", "wt", "disp"),
categorical_vars = c("cyl", "gear"))
plots <- plot_predictors(raw_data, response = "Year",
continuous_vars = c("Mom.Age", "Deploy.Mass"),
categorical_vars = c("Pup.sex", "Dominant.prey,species"))
raw_data
class(raw_data$Pup.sex)
class(raw_data$Dominant.prey.species)
plots <- plot_predictors(raw_data, response = "Diet.diversity",
+                          continuous_vars = c("Mom.Age", "Deploy.Mass"),
plots <- plot_predictors(raw_data, response = "Diet.diversity",
+                          continuous_vars = c("Mom.Age", "Deploy.Mass"),
plots <- plot_predictors(raw_data, response = "Diet.diversity", continuous_vars = c("Mom.Age", "Deploy.Mass"), categorical_vars = c("Pup.sex", "Dominant.prey,species"))
#'
#' @return A list of ggplot objects, one for each predictor variable plotted against the response.
#' @import ggplot2
#' @export
#'
#' @examples
#' # Example using the built-in mtcars dataset
#' plot_explore(mtcars, response = "mpg",
#'                 continuous_vars = c("hp", "wt", "disp"),
#'                 categorical_vars = c("cyl", "gear"))
plot_predictors <- function(data, response, continuous_vars = NULL, categorical_vars = NULL) {
library(ggplot2)  # Load ggplot2 for visualization
library(gridExtra)  # Load gridExtra for arranging plots
plots <- list()  # Store plots
# Ensure the response and selected variables exist in the dataframe
all_vars <- c(response, continuous_vars, categorical_vars)
valid_vars <- all_vars[all_vars %in% names(data)]  # Filter out non-existing variables
# Remove rows with NAs in the valid response and predictor variables
data_clean <- data[complete.cases(data[valid_vars]), ]
# 1️⃣ Scatterplots for Continuous Predictors
if (!is.null(continuous_vars)) {
continuous_vars <- continuous_vars[continuous_vars %in% valid_vars]  # Ensure continuous_vars are valid
for (var in continuous_vars) {
p <- ggplot(data_clean, aes_string(x = var, y = response)) +
geom_point(alpha = 0.6, color = "blue") +
geom_smooth(method = "lm", color = "red", se = FALSE) +
labs(title = paste("Scatterplot of", response, "vs", var),
x = var, y = response) +
theme_minimal() +theme(
panel.border = element_rect(color = "black", fill = NA, linewidth = 1),
panel.spacing = unit(2, "lines"))
plots[[var]] <- p  # Add to list
}
}
# 2️⃣ Boxplots for Categorical Predictors
if (!is.null(categorical_vars)) {
categorical_vars <- categorical_vars[categorical_vars %in% valid_vars]  # Ensure categorical_vars are valid
for (var in categorical_vars) {
p <- ggplot(data_clean, aes_string(x = var, y = response)) +
geom_boxplot(fill = "lightblue", color = "black") +
labs(title = paste("Boxplot of", response, "by", var),
x = var, y = response) +
theme_minimal() +theme(
panel.border = element_rect(color = "black", fill = NA, linewidth = 1),
panel.spacing = unit(2, "lines"))
plots[[var]] <- p  # Add to list
}
}
# 3️⃣ Create a Composite Figure (Grid of All Plots)
if (length(plots) > 0) {
# Arrange plots in a grid layout
grid.arrange(grobs = plots, ncol = 2)  # Change ncol to adjust layout
} else {
message("No plots were created.")
}
return(plots)  # Return all plots in a list
}
plots <- plot_predictors(mtcars, response = "mpg",
continuous_vars = c("hp", "wt", "disp"),
categorical_vars = c("cyl", "gear"))
raw_data$Pup.sex <- as.factor(raw_data$Pup.sex)
#'
#' @return A list of ggplot objects, one for each predictor variable plotted against the response.
#' @import ggplot2
#' @export
#'
#' @examples
#' # Example using the built-in mtcars dataset
#' plot_explore(mtcars, response = "mpg",
#'                 continuous_vars = c("hp", "wt", "disp"),
#'                 categorical_vars = c("cyl", "gear"))
plot_predictors <- function(data, response, continuous_vars = NULL, categorical_vars = NULL) {
library(ggplot2)  # Load ggplot2 for visualization
library(gridExtra)  # Load gridExtra for arranging plots
plots <- list()  # Store plots
# Ensure the response and selected variables exist in the dataframe
all_vars <- c(response, continuous_vars, categorical_vars)
valid_vars <- all_vars[all_vars %in% names(data)]  # Filter out non-existing variables
# Remove rows with NAs in the valid response and predictor variables
data_clean <- data[complete.cases(data[valid_vars]), ]
# 1️⃣ Scatterplots for Continuous Predictors
if (!is.null(continuous_vars)) {
continuous_vars <- continuous_vars[continuous_vars %in% valid_vars]  # Ensure continuous_vars are valid
for (var in continuous_vars) {
p <- ggplot(data_clean, aes_string(x = var, y = response)) +
geom_point(alpha = 0.6, color = "black") +
geom_smooth(method = "lm", color = "red", se = FALSE) +
labs(title = paste(response, "vs", var),
x = var, y = response) +
theme_minimal() +theme(
panel.border = element_rect(color = "black", fill = NA, linewidth = 1),
panel.spacing = unit(2, "lines"))
plots[[var]] <- p  # Add to list
}
}
# 2️⃣ Boxplots for Categorical Predictors
if (!is.null(categorical_vars)) {
categorical_vars <- categorical_vars[categorical_vars %in% valid_vars]  # Ensure categorical_vars are valid
for (var in categorical_vars) {
p <- ggplot(data_clean, aes_string(x = var, y = response)) +
geom_boxplot(fill = "lightblue", color = "black") +
labs(title = paste(response, "by", var),
x = var, y = response) +
theme_minimal() +theme(
panel.border = element_rect(color = "black", fill = NA, linewidth = 1),
panel.spacing = unit(2, "lines"))
plots[[var]] <- p  # Add to list
}
}
# 3️⃣ Create a Composite Figure (Grid of All Plots)
if (length(plots) > 0) {
# Arrange plots in a grid layout
grid.arrange(grobs = plots, ncol = 2)  # Change ncol to adjust layout
} else {
message("No plots were created.")
}
return(plots)  # Return all plots in a list
}
plots <- plot_predictors(raw_data, response = "Diet.diversity", continuous_vars = c("Mom.Age", "Deploy.Mass"), categorical_vars = c("Pup.sex", "Dominant.prey,species"))
data(cars)
cars
mtcars
plot_explore(mtcars, response = "mpg", continuous_vars = c("hp", "wt", "disp"), categorical_vars = c("cyl", "gear"))
#'
#' @return A list of ggplot objects, one for each predictor variable plotted against the response.
#' @import ggplot2
#' @export
#'
#' @examples
#' # Example using the built-in mtcars dataset
#' plot_explore(mtcars, response = "mpg",
#'                 continuous_vars = c("hp", "wt", "disp"),
#'                 categorical_vars = c("cyl", "gear"))
plot_explore <- function(data, response, continuous_vars = NULL, categorical_vars = NULL) {
library(ggplot2)  # Load ggplot2 for visualization
library(gridExtra)  # Load gridExtra for arranging plots
plots <- list()  # Store plots
# Ensure the response and selected variables exist in the dataframe
all_vars <- c(response, continuous_vars, categorical_vars)
valid_vars <- all_vars[all_vars %in% names(data)]  # Filter out non-existing variables
# Remove rows with NAs in the valid response and predictor variables
data_clean <- data[complete.cases(data[valid_vars]), ]
# 1️⃣ Scatterplots for Continuous Predictors
if (!is.null(continuous_vars)) {
continuous_vars <- continuous_vars[continuous_vars %in% valid_vars]  # Ensure continuous_vars are valid
for (var in continuous_vars) {
p <- ggplot(data_clean, aes_string(x = var, y = response)) +
geom_point(alpha = 0.6, color = "black") +
geom_smooth(method = "lm", color = "red", se = FALSE) +
labs(title = paste(response, "vs", var),
x = var, y = response) +
theme_minimal() +theme(
panel.border = element_rect(color = "black", fill = NA, linewidth = 1),
panel.spacing = unit(2, "lines"))
plots[[var]] <- p  # Add to list
}
}
# 2️⃣ Boxplots for Categorical Predictors
if (!is.null(categorical_vars)) {
categorical_vars <- categorical_vars[categorical_vars %in% valid_vars]  # Ensure categorical_vars are valid
for (var in categorical_vars) {
p <- ggplot(data_clean, aes_string(x = var, y = response)) +
geom_boxplot(fill = "lightblue", color = "black") +
labs(title = paste(response, "by", var),
x = var, y = response) +
theme_minimal() +theme(
panel.border = element_rect(color = "black", fill = NA, linewidth = 1),
panel.spacing = unit(2, "lines"))
plots[[var]] <- p  # Add to list
}
}
# 3️⃣ Create a Composite Figure (Grid of All Plots)
if (length(plots) > 0) {
# Arrange plots in a grid layout
grid.arrange(grobs = plots, ncol = 2)  # Change ncol to adjust layout
} else {
message("No plots were created.")
}
return(plots)  # Return all plots in a list
}
plot_explore(mtcars, response = "mpg", continuous_vars = c("hp", "wt", "disp"), categorical_vars = c("cyl", "gear"))
see <- plot_explore(mtcars, response = "mpg", continuous_vars = c("hp", "wt", "disp"), categorical_vars = c("cyl", "gear"))
devtools::document()
?plot_explore
plots <- plot_explore(raw_data, response = "Diet.diversity", continuous_vars = c("Mom.Age", "Deploy.Mass"), categorical_vars = c("Pup.sex", "Dominant.prey,species"))
class(raw_data$Dominant.prey.species)
raw_data$Dominant.prey.species <- as.factor(raw_data$Dominant.prey.species)
plots <- plot_explore(raw_data, response = "Diet.diversity", continuous_vars = c("Mom.Age", "Deploy.Mass"), categorical_vars = c("Pup.sex", "Dominant.prey,species"))
class(raw_data$Dominant.prey.species)
plot_explore(mtcars, response = "mpg",
continuous_vars = c("hp", "wt", "disp"),
categorical_vars = c("cyl", "gear"))
see <- plot_explore(mtcars, response = "mpg",
continuous_vars = c("hp", "wt", "disp"),
categorical_vars = c("cyl", "gear"))
class(mtcars$cyl)
mtcars$cyl <- as.factor(mtcars$cyl)
see <- plot_explore(mtcars, response = "mpg",
+                     continuous_vars = c("hp", "wt", "disp"),
see <- plot_explore(mtcars, response = "mpg", continuous_vars = c("hp", "wt", "disp"), categorical_vars = c("cyl", "gear"))
class(raw_data$Dominant.prey.species)
plots <- plot_explore(raw_data, response = "Diet.diversity", continuous_vars = c("Mom.Age", "Deploy.Mass"), categorical_vars = c("Pup.sex", "Dominant.prey,species"))
plots <- plot_explore(raw_data, response = "Diet.diversity", continuous_vars = c("Mom.Age", "Deploy.Mass"), categorical_vars = c("Dominant.prey,species"))
#'
#' @return A list of ggplot objects, one for each predictor variable plotted against the response.
#' @import ggplot2
#' @export
#'
#' @examples
#' # Example using the built-in mtcars dataset
#' plot_explore(mtcars, response = "mpg",
#'                 continuous_vars = c("hp", "wt", "disp"),
#'                 categorical_vars = c("cyl", "gear"))
plot_explore <- function(data, response, continuous_vars = NULL, categorical_vars = NULL) {
library(ggplot2)  # Load ggplot2 for visualization
library(gridExtra)  # Load gridExtra for arranging plots
plots <- list()  # Store plots
# Ensure the response and selected variables exist in the dataframe
all_vars <- c(response, continuous_vars, categorical_vars)
valid_vars <- all_vars[all_vars %in% names(data)]  # Filter out non-existing variables
# Remove rows with NAs in the valid response and predictor variables
data_clean <- data[complete.cases(data[valid_vars]), ]
# 1️⃣ Scatterplots for Continuous Predictors
if (!is.null(continuous_vars)) {
continuous_vars <- continuous_vars[continuous_vars %in% valid_vars]  # Ensure continuous_vars are valid
for (var in continuous_vars) {
p <- ggplot(data_clean, aes_string(x = var, y = response)) +
geom_point(alpha = 0.6, color = "black") +
geom_smooth(method = "lm", color = "red", se = FALSE) +
labs(title = paste(response, "vs", var),
x = var, y = response) +
theme_minimal() +theme(
panel.border = element_rect(color = "black", fill = NA, linewidth = 1),
panel.spacing = unit(2, "lines"))
plots[[var]] <- p  # Add to list
}
}
# 2️⃣ Boxplots for Categorical Predictors
if (!is.null(categorical_vars)) {
categorical_vars <- categorical_vars[categorical_vars %in% valid_vars]  # Ensure categorical_vars are valid
for (var in categorical_vars) {
# Check if the variable is factor/character, and if not, convert it to factor
data_clean[[var]] <- as.factor(data_clean[[var]])  # Convert categorical variable to factor
p <- ggplot(data_clean, aes_string(x = var, y = response)) +
geom_boxplot(fill = "lightblue", color = "black") +
labs(title = paste(response, "by", var),
x = var, y = response) +
theme_minimal() +theme(
panel.border = element_rect(color = "black", fill = NA, linewidth = 1),
panel.spacing = unit(2, "lines"))
plots[[var]] <- p  # Add to list
}
}
# 3️⃣ Create a Composite Figure (Grid of All Plots)
if (length(plots) > 0) {
# Arrange plots in a grid layout
grid.arrange(grobs = plots, ncol = 2)  # Change ncol to adjust layout
} else {
message("No plots were created.")
}
return(plots)  # Return all plots in a list
}
plots <- plot_explore(raw_data, response = "Diet.diversity", continuous_vars = c("Mom.Age", "Deploy.Mass"), categorical_vars = c("Dominant.prey,species"))
plots <- plot_explore(raw_data, response = "Diet.diversity", continuous_vars = c("Mom.Age", "Deploy.Mass"), categorical_vars = c("Dominant.prey.species"))
