<<<<<<< HEAD
labs(title = "Pup Wean Mass and Dominant Prey Species", x = "Dominant Prey Species", y = "Pup Wean Mass (Kg)") +
ggplot(seal_data) + geom_point(aes(seal_data$Dominant.prey.species, seal_data$Pup.Wean.Mass)) +
labs(title = "Pup Wean Mass and Dominant Prey Species", x = "Dominant Prey Species", y = "Pup Wean Mass (Kg)")
# Pup Wean Mass + Dominant Prey Species
ggplot(seal_data) + geom_point(aes(seal_data$Dominant.prey.species, seal_data$Pup.Wean.Mass)) +
labs(title = "Pup Wean Mass and Dominant Prey Species", x = "Dominant Prey Species", y = "Pup Wean Mass (Kg)")
ggplot(seal_data) + geom_point(aes(seal_data$Pup.sex, seal_data$Pup.Wean.Mass)) +
labs(title = "Mass Change and Mom ID", x = "Pup Sex", y = "Pup Wean Mass (Kg)") +
geom_smooth(aes(seal_data$Pup.sex, seal_data$Pup.Wean.Mass), method="lm", se=T)
ggplot(seal_data) + geom_point(aes(seal_data$Pup.sex, seal_data$Pup.Wean.Mass)) +
labs(title = "Mass Change and Mom ID", x = "Pup Sex", y = "Pup Wean Mass (Kg)") +
geom_smooth(aes(seal_data$Pup.sex, seal_data$Pup.Wean.Mass), method="glm", se=T)
ggplot(seal_data) + geom_point(aes(seal_data$Pup.sex, seal_data$Pup.Wean.Mass)) +
labs(title = "Mass Change and Mom ID", x = "Pup Sex", y = "Pup Wean Mass (Kg)") +
geom_smooth(aes(seal_data$Pup.sex, seal_data$Pup.Wean.Mass), method="lm", se=T)
ggplot(seal_data) + geom_point(aes(seal_data$Mom.Age, seal_data$Pup.Wean.Mass)) +
labs(title = "Mass Change and Mom ID", x = "Maternal Age", y = "Pup Wean Mass (Kg)") +
geom_smooth(aes(seal_data$Mom.Age, seal_data$Pup.Wean.Mass), method="lm", se=T)
ggplot(seal_data) + geom_point(aes(seal_data$Dietary.energy.density, seal_data$Pup.Wean.Mass, color = MomID)) +
labs(title = "Pup Wean Mass and Dietary Energy Density", x = "Dietary Energy Density (kJ/g of prey tissue)", y = "Pup Wean Mass (Kg)") +
geom_smooth(aes(seal_data$Dietary.energy.density, seal_data$Pup.Wean.Mass), method="lm", se=T)
ggplot(seal_data) + geom_point(aes(seal_data$Diet.diversity, seal_data$Pup.Wean.Mass, color = seal_data$MomID)) +
labs(title = "Pup Wean Mass and Diet Diversity", x = "Diet Diveristy (no specific units for Shannon index)", y = "Pup Wean Mass (Kg)") +
geom_smooth(aes(seal_data$Diet.diversity, seal_data$Pup.Wean.Mass), method="lm", se=T)
ggplot(seal_data) + geom_point(aes(seal_data$Year, seal_data$Pup.Wean.Mass, color = seal_data$MomID)) +
labs(title = "Pup Wean Mass and Year", x = "Year", y = "Pup Wean Mass (Kg)") +
geom_smooth(aes(seal_data$Year, seal_data$Pup.Wean.Mass), method="lm", se=T)
ggplot(seal_data) + geom_point(aes(seal_data$MomID, seal_data$Pup.Wean.Mass)) +
labs(title = "Mass Change and Mom ID", x = "Mom ID", y = "Pup Wean Mass (Kg)") +
geom_smooth(aes(seal_data$MomID, seal_data$Pup.Wean.Mass), method="lm", se=T)
ggplot(seal_data) + geom_point(aes(seal_data$Dominant.prey.species, seal_data$Pup.Wean.Mass)) +
labs(title = "Pup Wean Mass and Dominant Prey Species", x = "Dominant Prey Species", y = "Pup Wean Mass (Kg)")
ggplot(seal_data) + geom_point(aes(seal_data$Pup.sex, seal_data$Pup.Wean.Mass)) +
labs(title = "Mass Change and Mom ID", x = "Pup Sex", y = "Pup Wean Mass (Kg)") +
geom_smooth(aes(seal_data$Pup.sex, seal_data$Pup.Wean.Mass), method="lm", se=T)
ggplot(seal_data) + geom_point(aes(seal_data$Pup.sex, seal_data$Pup.Wean.Mass)) +
labs(title = "Pup Wean Mass and Mom ID", x = "Pup Sex", y = "Pup Wean Mass (Kg)") +
geom_smooth(aes(seal_data$Pup.sex, seal_data$Pup.Wean.Mass), method="lm", se=T)
ggplot(seal_data) + geom_point(aes(seal_data$Pup.sex, seal_data$Pup.Wean.Mass)) +
labs(title = "Pup Wean Mass and Pup Sex", x = "Pup Sex", y = "Pup Wean Mass (Kg)") +
geom_smooth(aes(seal_data$Pup.sex, seal_data$Pup.Wean.Mass), method="lm", se=T)
ggplot(seal_data) + geom_point(aes(seal_data$Mom.Age, seal_data$Pup.Wean.Mass)) +
labs(title = "Mass Change and Mom ID", x = "Maternal Age", y = "Pup Wean Mass (Kg)") +
geom_smooth(aes(seal_data$Mom.Age, seal_data$Pup.Wean.Mass), method="lm", se=T)
ggplot(seal_data) + geom_point(aes(seal_data$Mom.Age, seal_data$Pup.Wean.Mass)) +
labs(title = "Pup Wean Mass and Maternal Age", x = "Maternal Age", y = "Pup Wean Mass (Kg)") +
geom_smooth(aes(seal_data$Mom.Age, seal_data$Pup.Wean.Mass), method="lm", se=T)
ggplot(seal_data) + geom_point(aes(seal_data$MomID, seal_data$Pup.Wean.Mass)) +
labs(title = "Pup Wean Mass and Mom ID", x = "Mom ID", y = "Pup Wean Mass (Kg)") +
geom_smooth(aes(seal_data$MomID, seal_data$Pup.Wean.Mass), method="lm", se=T)
=======
<<<<<<< HEAD
x = var, y = response) +
theme_minimal() +theme(
panel.border = element_rect(color = "black", fill = NA, linewidth = 1),
panel.spacing = unit(2, "lines"))
plots[[var]] <- p  # Add to list
}
}
# 2️⃣ Boxplots for Categorical Predictors
if (!is.null(categorical_vars)) {
categorical_vars <- categorical_vars[categorical_vars %in% valid_vars]  # Ensure categorical_vars are valid
for (var in categorical_vars) {
p <- ggplot(data_clean, aes_string(x = var, y = response)) +
geom_boxplot(fill = "lightblue", color = "black") +
labs(title = paste("Boxplot of", response, "by", var),
x = var, y = response) +
theme_minimal() +theme(
panel.border = element_rect(color = "black", fill = NA, linewidth = 1),
panel.spacing = unit(2, "lines"))
plots[[var]] <- p  # Add to list
}
}
# 3️⃣ Create a Composite Figure (Grid of All Plots)
if (length(plots) > 0) {
# Arrange plots in a grid layout
grid.arrange(grobs = plots, ncol = 2)  # Change ncol to adjust layout
} else {
message("No plots were created.")
}
return(plots)  # Return all plots in a list
}
plot_explore(mtcars, response = "mpg",
continuous_vars = c("hp", "wt", "disp"),
categorical_vars = c("cyl", "gear"))
see <- plot_explore(mtcars, response = "mpg", continuous_vars = c("hp", "wt", "disp"), categorical_vars = c("cyl", "gear"))
see
#'
#' @return A list of ggplot objects, one for each predictor variable plotted against the response.
#' @import ggplot2
#' @export
#'
#' @examples
#' # Example using the built-in mtcars dataset
#' plot_explore(mtcars, response = "mpg",
#'                 continuous_vars = c("hp", "wt", "disp"),
#'                 categorical_vars = c("cyl", "gear"))
plot_predictors <- function(data, response, continuous_vars = NULL, categorical_vars = NULL) {
library(ggplot2)  # Load ggplot2 for visualization
# Create an empty dataframe to store the plot data
plot_data <- data.frame()
# Ensure the response and selected variables exist in the dataframe
all_vars <- c(response, continuous_vars, categorical_vars)
valid_vars <- all_vars[all_vars %in% names(data)]  # Filter out non-existing variables
# Remove rows with NAs in the valid response and predictor variables
data_clean <- data[complete.cases(data[valid_vars]), ]
# 1️⃣ Scatterplots for Continuous Predictors
if (!is.null(continuous_vars)) {
continuous_vars <- continuous_vars[continuous_vars %in% valid_vars]  # Ensure continuous_vars are valid
for (var in continuous_vars) {
p <- ggplot(data_clean, aes_string(x = var, y = response)) +
geom_point(alpha = 0.6, color = "blue") +
geom_smooth(method = "lm", color = "red", se = FALSE) +
labs(title = paste("Scatterplot of", response, "vs", var),
x = var, y = response) +
theme_minimal() +
theme(legend.position = "none") +
# Add a column for the plot type (used in facet_wrap)
aes(facet = "Continuous Predictor")
plot_data <- rbind(plot_data, data.frame(plot_type = "continuous", variable = var, value = data_clean[[var]], response = data_clean[[response]]))
}
}
# 2️⃣ Boxplots for Categorical Predictors
if (!is.null(categorical_vars)) {
categorical_vars <- categorical_vars[categorical_vars %in% valid_vars]  # Ensure categorical_vars are valid
for (var in categorical_vars) {
p <- ggplot(data_clean, aes_string(x = var, y = response)) +
geom_boxplot(fill = "lightblue", color = "black") +
labs(title = paste("Boxplot of", response, "by", var),
x = var, y = response) +
theme_minimal() +
theme(legend.position = "none") +
aes(facet = "Categorical Predictor")
plot_data <- rbind(plot_data, data.frame(plot_type = "categorical", variable = var, value = data_clean[[var]], response = data_clean[[response]]))
}
}
# 3️⃣ Combine all the plots in one grid using facet_wrap
final_plot <- ggplot(plot_data, aes(x = value, y = response)) +
geom_point(alpha = 0.6, color = "blue") +
geom_smooth(method = "lm", color = "red", se = FALSE) +
facet_wrap(~plot_type, scales = "free_y", ncol = 2) +
theme_minimal()
return(final_plot)  # Return the combined plot with facet_wrap
}
see <- plot_explore(mtcars, response = "mpg", continuous_vars = c("hp", "wt", "disp"), categorical_vars = c("cyl", "gear"))
see <- plot_predictors(mtcars, response = "mpg", continuous_vars = c("hp", "wt", "disp"), categorical_vars = c("cyl", "gear"))
see
#'
#' @return A list of ggplot objects, one for each predictor variable plotted against the response.
#' @import ggplot2
#' @export
#'
#' @examples
#' # Example using the built-in mtcars dataset
#' plot_explore(mtcars, response = "mpg",
#'                 continuous_vars = c("hp", "wt", "disp"),
#'                 categorical_vars = c("cyl", "gear"))
plot_predictors <- function(data, response, continuous_vars = NULL, categorical_vars = NULL) {
library(ggplot2)  # Load ggplot2 for visualization
# Create an empty dataframe to store the plot data
plot_data <- data.frame()
# Ensure the response and selected variables exist in the dataframe
all_vars <- c(response, continuous_vars, categorical_vars)
valid_vars <- all_vars[all_vars %in% names(data)]  # Filter out non-existing variables
# Remove rows with NAs in the valid response and predictor variables
data_clean <- data[complete.cases(data[valid_vars]), ]
# 1️⃣ Scatterplots for Continuous Predictors
if (!is.null(continuous_vars)) {
continuous_vars <- continuous_vars[continuous_vars %in% valid_vars]  # Ensure continuous_vars are valid
for (var in continuous_vars) {
p <- ggplot(data_clean, aes_string(x = var, y = response)) +
geom_point(alpha = 0.6, color = "blue") +
geom_smooth(method = "lm", color = "red", se = FALSE) +
labs(title = paste("Scatterplot of", response, "vs", var),
x = var, y = response) +
theme_minimal() +
theme(legend.position = "none") +
# Add a column for the plot type (used in facet_wrap)
aes(facet = "Continuous Predictor")
plot_data <- rbind(plot_data, data.frame(plot_type = "continuous", variable = var, value = data_clean[[var]], response = data_clean[[response]]))
}
}
# 2️⃣ Boxplots for Categorical Predictors
if (!is.null(categorical_vars)) {
categorical_vars <- categorical_vars[categorical_vars %in% valid_vars]  # Ensure categorical_vars are valid
for (var in categorical_vars) {
p <- ggplot(data_clean, aes_string(x = var, y = response)) +
geom_boxplot(fill = "lightblue", color = "black") +
labs(title = paste("Boxplot of", response, "by", var),
x = var, y = response) +
theme_minimal() +
theme(legend.position = "none") +
aes(facet = "Categorical Predictor")
plot_data <- rbind(plot_data, data.frame(plot_type = "categorical", variable = var, value = data_clean[[var]], response = data_clean[[response]]))
}
}
# 3️⃣ Combine all the plots in one grid using facet_wrap
final_plot <- ggplot(plot_data, aes(x = value, y = response)) +
geom_point(alpha = 0.6, color = "blue") +
geom_smooth(method = "lm", color = "red", se = FALSE) +
facet_wrap(~plot_type, scales = "free_x", ncol = 4) +
theme_minimal() +theme(
panel.border = element_rect(color = "black", fill = NA, linewidth = 1),
panel.spacing = unit(2, "lines"))
return(final_plot)  # Return the combined plot with facet_wrap
}
plot_predictors(mtcars, response = "mpg", continuous_vars = c("hp", "wt", "disp"), categorical_vars = c("cyl", "gear"))
#'
#' @return A list of ggplot objects, one for each predictor variable plotted against the response.
#' @import ggplot2
#' @export
#'
#' @examples
#' # Example using the built-in mtcars dataset
#' plot_explore(mtcars, response = "mpg",
#'                 continuous_vars = c("hp", "wt", "disp"),
#'                 categorical_vars = c("cyl", "gear"))
plot_predictors <- function(data, response, continuous_vars = NULL, categorical_vars = NULL) {
library(ggplot2)  # Load ggplot2 for visualization
library(gridExtra)  # Load gridExtra for arranging plots
# Create an empty dataframe to store the plot data
plot_data <- data.frame()
# Ensure the response and selected variables exist in the dataframe
all_vars <- c(response, continuous_vars, categorical_vars)
valid_vars <- all_vars[all_vars %in% names(data)]  # Filter out non-existing variables
# Remove rows with NAs in the valid response and predictor variables
data_clean <- data[complete.cases(data[valid_vars]), ]
# 1️⃣ Scatterplots for Continuous Predictors
if (!is.null(continuous_vars)) {
continuous_vars <- continuous_vars[continuous_vars %in% valid_vars]  # Ensure continuous_vars are valid
for (var in continuous_vars) {
p <- ggplot(data_clean, aes_string(x = var, y = response)) geom_point(alpha = 0.6, color = "blue") +
#'
#' @return A list of ggplot objects, one for each predictor variable plotted against the response.
#' @import ggplot2
#' @export
#'
#' @examples
#' # Example using the built-in mtcars dataset
#' plot_explore(mtcars, response = "mpg",
#'                 continuous_vars = c("hp", "wt", "disp"),
#'                 categorical_vars = c("cyl", "gear"))
plot_predictors <- function(data, response, continuous_vars = NULL, categorical_vars = NULL) {
library(ggplot2)  # Load ggplot2 for visualization
library(gridExtra)  # Load gridExtra for arranging plots
plots <- list()  # Store plots
# Ensure the response and selected variables exist in the dataframe
all_vars <- c(response, continuous_vars, categorical_vars)
valid_vars <- all_vars[all_vars %in% names(data)]  # Filter out non-existing variables
# Remove rows with NAs in the valid response and predictor variables
data_clean <- data[complete.cases(data[valid_vars]), ]
# 1️⃣ Scatterplots for Continuous Predictors
if (!is.null(continuous_vars)) {
continuous_vars <- continuous_vars[continuous_vars %in% valid_vars]  # Ensure continuous_vars are valid
for (var in continuous_vars) {
p <- ggplot(data_clean, aes_string(x = var, y = response)) +
geom_point(alpha = 0.6, color = "blue") +
geom_smooth(method = "lm", color = "red", se = FALSE) +
labs(title = paste("Scatterplot of", response, "vs", var),
x = var, y = response) +
theme_minimal()
plots[[var]] <- p  # Add to list
}
}
# 2️⃣ Boxplots for Categorical Predictors
if (!is.null(categorical_vars)) {
categorical_vars <- categorical_vars[categorical_vars %in% valid_vars]  # Ensure categorical_vars are valid
for (var in categorical_vars) {
p <- ggplot(data_clean, aes_string(x = var, y = response)) +
geom_boxplot(fill = "lightblue", color = "black") +
labs(title = paste("Boxplot of", response, "by", var),
x = var, y = response) +
theme_minimal()
plots[[var]] <- p  # Add to list
}
}
# 3️⃣ Create a Composite Figure (Grid of All Plots)
if (length(plots) > 0) {
# Arrange plots in a grid layout
grid.arrange(grobs = plots, ncol = 2)  # Change ncol to adjust layout
} else {
message("No plots were created.")
}
return(plots)  # Return all plots in a list
}
plot_predictors(mtcars, response = "mpg", continuous_vars = c("hp", "wt", "disp"), categorical_vars = c("cyl", "gear"))
plots <- plot_predictors(mtcars, response = "mpg",
continuous_vars = c("hp", "wt", "disp"),
categorical_vars = c("cyl", "gear"))
plots <- plot_predictors(raw_data, response = "Year",
continuous_vars = c("Mom.Age", "Deploy.Mass"),
categorical_vars = c("Pup.sex", "Dominant.prey,species"))
raw_data
class(raw_data$Pup.sex)
class(raw_data$Dominant.prey.species)
plots <- plot_predictors(raw_data, response = "Diet.diversity",
+                          continuous_vars = c("Mom.Age", "Deploy.Mass"),
plots <- plot_predictors(raw_data, response = "Diet.diversity",
+                          continuous_vars = c("Mom.Age", "Deploy.Mass"),
plots <- plot_predictors(raw_data, response = "Diet.diversity", continuous_vars = c("Mom.Age", "Deploy.Mass"), categorical_vars = c("Pup.sex", "Dominant.prey,species"))
#'
#' @return A list of ggplot objects, one for each predictor variable plotted against the response.
#' @import ggplot2
#' @export
#'
#' @examples
#' # Example using the built-in mtcars dataset
#' plot_explore(mtcars, response = "mpg",
#'                 continuous_vars = c("hp", "wt", "disp"),
#'                 categorical_vars = c("cyl", "gear"))
plot_predictors <- function(data, response, continuous_vars = NULL, categorical_vars = NULL) {
library(ggplot2)  # Load ggplot2 for visualization
library(gridExtra)  # Load gridExtra for arranging plots
plots <- list()  # Store plots
# Ensure the response and selected variables exist in the dataframe
all_vars <- c(response, continuous_vars, categorical_vars)
valid_vars <- all_vars[all_vars %in% names(data)]  # Filter out non-existing variables
# Remove rows with NAs in the valid response and predictor variables
data_clean <- data[complete.cases(data[valid_vars]), ]
# 1️⃣ Scatterplots for Continuous Predictors
if (!is.null(continuous_vars)) {
continuous_vars <- continuous_vars[continuous_vars %in% valid_vars]  # Ensure continuous_vars are valid
for (var in continuous_vars) {
p <- ggplot(data_clean, aes_string(x = var, y = response)) +
geom_point(alpha = 0.6, color = "blue") +
geom_smooth(method = "lm", color = "red", se = FALSE) +
labs(title = paste("Scatterplot of", response, "vs", var),
x = var, y = response) +
theme_minimal() +theme(
panel.border = element_rect(color = "black", fill = NA, linewidth = 1),
panel.spacing = unit(2, "lines"))
plots[[var]] <- p  # Add to list
}
}
# 2️⃣ Boxplots for Categorical Predictors
if (!is.null(categorical_vars)) {
categorical_vars <- categorical_vars[categorical_vars %in% valid_vars]  # Ensure categorical_vars are valid
for (var in categorical_vars) {
p <- ggplot(data_clean, aes_string(x = var, y = response)) +
geom_boxplot(fill = "lightblue", color = "black") +
labs(title = paste("Boxplot of", response, "by", var),
x = var, y = response) +
theme_minimal() +theme(
panel.border = element_rect(color = "black", fill = NA, linewidth = 1),
panel.spacing = unit(2, "lines"))
plots[[var]] <- p  # Add to list
}
}
# 3️⃣ Create a Composite Figure (Grid of All Plots)
if (length(plots) > 0) {
# Arrange plots in a grid layout
grid.arrange(grobs = plots, ncol = 2)  # Change ncol to adjust layout
} else {
message("No plots were created.")
}
return(plots)  # Return all plots in a list
}
plots <- plot_predictors(mtcars, response = "mpg",
continuous_vars = c("hp", "wt", "disp"),
categorical_vars = c("cyl", "gear"))
raw_data$Pup.sex <- as.factor(raw_data$Pup.sex)
#'
#' @return A list of ggplot objects, one for each predictor variable plotted against the response.
#' @import ggplot2
#' @export
#'
#' @examples
#' # Example using the built-in mtcars dataset
#' plot_explore(mtcars, response = "mpg",
#'                 continuous_vars = c("hp", "wt", "disp"),
#'                 categorical_vars = c("cyl", "gear"))
plot_predictors <- function(data, response, continuous_vars = NULL, categorical_vars = NULL) {
library(ggplot2)  # Load ggplot2 for visualization
library(gridExtra)  # Load gridExtra for arranging plots
plots <- list()  # Store plots
# Ensure the response and selected variables exist in the dataframe
all_vars <- c(response, continuous_vars, categorical_vars)
valid_vars <- all_vars[all_vars %in% names(data)]  # Filter out non-existing variables
# Remove rows with NAs in the valid response and predictor variables
data_clean <- data[complete.cases(data[valid_vars]), ]
# 1️⃣ Scatterplots for Continuous Predictors
if (!is.null(continuous_vars)) {
continuous_vars <- continuous_vars[continuous_vars %in% valid_vars]  # Ensure continuous_vars are valid
for (var in continuous_vars) {
p <- ggplot(data_clean, aes_string(x = var, y = response)) +
geom_point(alpha = 0.6, color = "black") +
geom_smooth(method = "lm", color = "red", se = FALSE) +
labs(title = paste(response, "vs", var),
x = var, y = response) +
theme_minimal() +theme(
panel.border = element_rect(color = "black", fill = NA, linewidth = 1),
panel.spacing = unit(2, "lines"))
plots[[var]] <- p  # Add to list
}
}
# 2️⃣ Boxplots for Categorical Predictors
if (!is.null(categorical_vars)) {
categorical_vars <- categorical_vars[categorical_vars %in% valid_vars]  # Ensure categorical_vars are valid
for (var in categorical_vars) {
p <- ggplot(data_clean, aes_string(x = var, y = response)) +
geom_boxplot(fill = "lightblue", color = "black") +
labs(title = paste(response, "by", var),
x = var, y = response) +
theme_minimal() +theme(
panel.border = element_rect(color = "black", fill = NA, linewidth = 1),
panel.spacing = unit(2, "lines"))
plots[[var]] <- p  # Add to list
}
}
# 3️⃣ Create a Composite Figure (Grid of All Plots)
if (length(plots) > 0) {
# Arrange plots in a grid layout
grid.arrange(grobs = plots, ncol = 2)  # Change ncol to adjust layout
} else {
message("No plots were created.")
}
return(plots)  # Return all plots in a list
}
plots <- plot_predictors(raw_data, response = "Diet.diversity", continuous_vars = c("Mom.Age", "Deploy.Mass"), categorical_vars = c("Pup.sex", "Dominant.prey,species"))
data(cars)
cars
mtcars
plot_explore(mtcars, response = "mpg", continuous_vars = c("hp", "wt", "disp"), categorical_vars = c("cyl", "gear"))
#'
#' @return A list of ggplot objects, one for each predictor variable plotted against the response.
#' @import ggplot2
#' @export
#'
#' @examples
#' # Example using the built-in mtcars dataset
#' plot_explore(mtcars, response = "mpg",
#'                 continuous_vars = c("hp", "wt", "disp"),
#'                 categorical_vars = c("cyl", "gear"))
plot_explore <- function(data, response, continuous_vars = NULL, categorical_vars = NULL) {
library(ggplot2)  # Load ggplot2 for visualization
library(gridExtra)  # Load gridExtra for arranging plots
plots <- list()  # Store plots
# Ensure the response and selected variables exist in the dataframe
all_vars <- c(response, continuous_vars, categorical_vars)
valid_vars <- all_vars[all_vars %in% names(data)]  # Filter out non-existing variables
# Remove rows with NAs in the valid response and predictor variables
data_clean <- data[complete.cases(data[valid_vars]), ]
# 1️⃣ Scatterplots for Continuous Predictors
if (!is.null(continuous_vars)) {
continuous_vars <- continuous_vars[continuous_vars %in% valid_vars]  # Ensure continuous_vars are valid
for (var in continuous_vars) {
p <- ggplot(data_clean, aes_string(x = var, y = response)) +
geom_point(alpha = 0.6, color = "black") +
geom_smooth(method = "lm", color = "red", se = FALSE) +
labs(title = paste(response, "vs", var),
x = var, y = response) +
theme_minimal() +theme(
panel.border = element_rect(color = "black", fill = NA, linewidth = 1),
panel.spacing = unit(2, "lines"))
plots[[var]] <- p  # Add to list
}
}
# 2️⃣ Boxplots for Categorical Predictors
if (!is.null(categorical_vars)) {
categorical_vars <- categorical_vars[categorical_vars %in% valid_vars]  # Ensure categorical_vars are valid
for (var in categorical_vars) {
p <- ggplot(data_clean, aes_string(x = var, y = response)) +
geom_boxplot(fill = "lightblue", color = "black") +
labs(title = paste(response, "by", var),
x = var, y = response) +
theme_minimal() +theme(
panel.border = element_rect(color = "black", fill = NA, linewidth = 1),
panel.spacing = unit(2, "lines"))
plots[[var]] <- p  # Add to list
}
}
# 3️⃣ Create a Composite Figure (Grid of All Plots)
if (length(plots) > 0) {
# Arrange plots in a grid layout
grid.arrange(grobs = plots, ncol = 2)  # Change ncol to adjust layout
} else {
message("No plots were created.")
}
return(plots)  # Return all plots in a list
}
plot_explore(mtcars, response = "mpg", continuous_vars = c("hp", "wt", "disp"), categorical_vars = c("cyl", "gear"))
see <- plot_explore(mtcars, response = "mpg", continuous_vars = c("hp", "wt", "disp"), categorical_vars = c("cyl", "gear"))
devtools::document()
?plot_explore
plots <- plot_explore(raw_data, response = "Diet.diversity", continuous_vars = c("Mom.Age", "Deploy.Mass"), categorical_vars = c("Pup.sex", "Dominant.prey,species"))
class(raw_data$Dominant.prey.species)
raw_data$Dominant.prey.species <- as.factor(raw_data$Dominant.prey.species)
plots <- plot_explore(raw_data, response = "Diet.diversity", continuous_vars = c("Mom.Age", "Deploy.Mass"), categorical_vars = c("Pup.sex", "Dominant.prey,species"))
class(raw_data$Dominant.prey.species)
plot_explore(mtcars, response = "mpg",
continuous_vars = c("hp", "wt", "disp"),
categorical_vars = c("cyl", "gear"))
see <- plot_explore(mtcars, response = "mpg",
continuous_vars = c("hp", "wt", "disp"),
categorical_vars = c("cyl", "gear"))
class(mtcars$cyl)
mtcars$cyl <- as.factor(mtcars$cyl)
see <- plot_explore(mtcars, response = "mpg",
+                     continuous_vars = c("hp", "wt", "disp"),
see <- plot_explore(mtcars, response = "mpg", continuous_vars = c("hp", "wt", "disp"), categorical_vars = c("cyl", "gear"))
class(raw_data$Dominant.prey.species)
plots <- plot_explore(raw_data, response = "Diet.diversity", continuous_vars = c("Mom.Age", "Deploy.Mass"), categorical_vars = c("Pup.sex", "Dominant.prey,species"))
plots <- plot_explore(raw_data, response = "Diet.diversity", continuous_vars = c("Mom.Age", "Deploy.Mass"), categorical_vars = c("Dominant.prey,species"))
#'
#' @return A list of ggplot objects, one for each predictor variable plotted against the response.
#' @import ggplot2
#' @export
#'
#' @examples
#' # Example using the built-in mtcars dataset
#' plot_explore(mtcars, response = "mpg",
#'                 continuous_vars = c("hp", "wt", "disp"),
#'                 categorical_vars = c("cyl", "gear"))
plot_explore <- function(data, response, continuous_vars = NULL, categorical_vars = NULL) {
library(ggplot2)  # Load ggplot2 for visualization
library(gridExtra)  # Load gridExtra for arranging plots
plots <- list()  # Store plots
# Ensure the response and selected variables exist in the dataframe
all_vars <- c(response, continuous_vars, categorical_vars)
valid_vars <- all_vars[all_vars %in% names(data)]  # Filter out non-existing variables
# Remove rows with NAs in the valid response and predictor variables
data_clean <- data[complete.cases(data[valid_vars]), ]
# 1️⃣ Scatterplots for Continuous Predictors
if (!is.null(continuous_vars)) {
continuous_vars <- continuous_vars[continuous_vars %in% valid_vars]  # Ensure continuous_vars are valid
for (var in continuous_vars) {
p <- ggplot(data_clean, aes_string(x = var, y = response)) +
geom_point(alpha = 0.6, color = "black") +
geom_smooth(method = "lm", color = "red", se = FALSE) +
labs(title = paste(response, "vs", var),
x = var, y = response) +
theme_minimal() +theme(
panel.border = element_rect(color = "black", fill = NA, linewidth = 1),
panel.spacing = unit(2, "lines"))
plots[[var]] <- p  # Add to list
}
}
# 2️⃣ Boxplots for Categorical Predictors
if (!is.null(categorical_vars)) {
categorical_vars <- categorical_vars[categorical_vars %in% valid_vars]  # Ensure categorical_vars are valid
for (var in categorical_vars) {
# Check if the variable is factor/character, and if not, convert it to factor
data_clean[[var]] <- as.factor(data_clean[[var]])  # Convert categorical variable to factor
p <- ggplot(data_clean, aes_string(x = var, y = response)) +
geom_boxplot(fill = "lightblue", color = "black") +
labs(title = paste(response, "by", var),
x = var, y = response) +
theme_minimal() +theme(
panel.border = element_rect(color = "black", fill = NA, linewidth = 1),
panel.spacing = unit(2, "lines"))
plots[[var]] <- p  # Add to list
}
}
# 3️⃣ Create a Composite Figure (Grid of All Plots)
if (length(plots) > 0) {
# Arrange plots in a grid layout
grid.arrange(grobs = plots, ncol = 2)  # Change ncol to adjust layout
} else {
message("No plots were created.")
}
return(plots)  # Return all plots in a list
}
plots <- plot_explore(raw_data, response = "Diet.diversity", continuous_vars = c("Mom.Age", "Deploy.Mass"), categorical_vars = c("Dominant.prey,species"))
plots <- plot_explore(raw_data, response = "Diet.diversity", continuous_vars = c("Mom.Age", "Deploy.Mass"), categorical_vars = c("Dominant.prey.species"))
=======
setwd("~/Desktop/IDPhD Classes/Stat 5620/Final Project/Proposal Presentation/Working Folder/Final Assignment")
setwd("~/Desktop/IDPhD Classes/Stat 5620/Final Project/Proposal Presentation/Working Folder/Final Assignment")
seal_data = read.csv("Data_Q1.csv", header = T)
seal_data = read.csv("Data_Q1.csv", header = T)
setwd("~/Desktop/IDPhD Classes/Stat 5620/Final Project/Proposal Presentation/Working Folder/Final Assignment/Processed_Data")
seal_data = read.csv("Data_Q1.csv", header = T)
summary(seal_data)
seal_data
Q1 = lm(seal_data$Mass.change ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity + seal_data$Dietary.energy.density
+ seal_data$Year + seal_data$MomID,
data = seal_data)
summary(Q1)
summary (Q1_2)
Q1_2 = lm(seal_data$Mass.change ~ seal_data$Diet.diversity + seal_data$Dietary.energy.density
+ seal_data$Year + seal_data$MomID,
data = seal_data)
summary (Q1_2)
seal_data
seal_data = read.csv("Data_Q1.csv", header = T)
seal_data = read.csv("Data_Q1.csv", header = T)
seal_data = read.csv("Data_Q1.csv", header = T)
setwd("~/Desktop/IDPhD Classes/Stat 5620/Final Project/Proposal Presentation/Working Folder/Final Assignment/Processed_Data")
seal_data = read.csv("Data_Q1.csv", header = T)
summary(seal_data)
seal_data
require(flexplot)
data = seal_data
View(data)
names( seal_data)
a = flexplot (MomID~1, data= seal_data)
a
b = flexplot (Year~1, data= seal_data)
b
c = flexplot (Dietary.energy.density~1, data= seal_data)
c
d = flexplot (Diet.diversity~1, data= seal_data)
d
e = flexplot (Dominant.prey.species~1, data= seal_data)
e
f = flexplot (Mass.change~1, data= seal_data)
f
require (cowplot)
plot_grid(a,b,c,d,e,f)
plot_grid(a,b,c,d,e,f)
ggplot(seal_data) + geom_point(aes(seal_data$Mass.change, seal_data$Dietary.energy.density, color = seal_data$MomID)) +
labs(title = "Mass Change and Dietary Energy Density", x = "Mass Change", y = "Dietary Energy Density") +
geom_smooth(aes(seal_data$Mass.change, seal_data$Dietary.energy.density), method="lm", se=F)
plot(Q1)
Q1 = lm(seal_data$Mass.change ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity + seal_data$Dietary.energy.density
+ seal_data$Year + seal_data$MomID,
data = seal_data)
summary(Q1)
plot(Q1)
ggplot(seal_data) + geom_point(aes(seal_data$Mass.change, seal_data$Dietary.energy.density, color = seal_data$MomID)) +
labs(title = "Mass Change and Dietary Energy Density", x = "Mass Change", y = "Dietary Energy Density") +
geom_smooth(aes(seal_data$Mass.change, seal_data$Dietary.energy.density), method="lm", se=F)
library(ggplot2)
ggplot(seal_data) + geom_point(aes(seal_data$Mass.change, seal_data$Dietary.energy.density, color = seal_data$MomID)) +
labs(title = "Mass Change and Dietary Energy Density", x = "Mass Change", y = "Dietary Energy Density") +
geom_smooth(aes(seal_data$Mass.change, seal_data$Dietary.energy.density), method="lm", se=F)
ggplot(seal_data) + geom_point(aes(seal_data$Dietary.energy.density, seal_data$Mass.change, color = seal_data$MomID)) +
labs(title = "Mass Change and Dietary Energy Density", x = "Dietary Energy Density", y = "Mass Change") +
geom_smooth(aes(seal_data$Mass.change, seal_data$Dietary.energy.density), method="lm", se=F)
ggplot(seal_data) + geom_point(aes(seal_data$, seal_data$Dietary.energy.density, color = seal_data$MomID)) +
ggplot(seal_data) + geom_point(aes(seal_data$, seal_data$Dietary.energy.density, color = seal_data$MomID)) +
ggplot(seal_data) + geom_point(aes(seal_data$Mass.change, seal_data$Dietary.energy.density, color = seal_data$MomID)) +
labs(title = "Mass Change and Dietary Energy Density", x = "Mass Change", y = "Dietary Energy Density") +
geom_smooth(aes(seal_data$Mass.change, seal_data$Dietary.energy.density), method="lm", se=F)
seal_data
ggplot(seal_data) + geom_point(aes(seal_data$Dietary.energy.density, seal_data$Dietary.Mass.change, color = seal_data$MomID)) +
labs(title = "Mass Change and Dietary Energy Density", x = "Mass Change", y = "Dietary Energy Density") +
geom_smooth(aes(seal_data$Mass.change, seal_data$Dietary.energy.density), method="lm", se=F)
ggplot(seal_data) + geom_point(aes(seal_data$Dietary.energy.density, seal_data$Mass.change, color = seal_data$MomID)) +
labs(title = "Mass Change and Dietary Energy Density", x = "Mass Change", y = "Dietary Energy Density") +
geom_smooth(aes(seal_data$Mass.change, seal_data$Dietary.energy.density), method="lm", se=F)
ggplot(seal_data) + geom_point(aes(seal_data$Dietary.energy.density, seal_data$Mass.change, color = seal_data$MomID)) +
labs(title = "Mass Change and Dietary Energy Density", x = "Dietary Energy Density", y = "Mass Change")
ggplot(seal_data) + geom_point(aes(seal_data$Dietary.energy.density, seal_data$Mass.change, color = seal_data$MomID)) +
labs(title = "Mass Change and Dietary Energy Density", x = "Dietary Energy Density", y = "Mass Change") +
geom_smooth(aes(seal_data$Dietary.energy.density, seal_data$Mass.change), method="lm", se=F)
ggplot(seal_data) + geom_point(aes(seal_data$Dietary.energy.density, seal_data$Mass.change, color = seal_data$MomID)) +
labs(title = "Mass Change and Dietary Energy Density", x = "Dietary Energy Density (kJ/g of prey tissue)", y = "Mass Change (Kg)") +
geom_smooth(aes(seal_data$Dietary.energy.density, seal_data$Mass.change), method="lm", se=F)
ggplot(seal_data) + geom_point(aes(seal_data$Dietary.energy.density, seal_data$Mass.change)) +
labs(title = "Mass Change and Dietary Energy Density", x = "Dietary Energy Density (kJ/g of prey tissue)", y = "Mass Change (Kg)") +
geom_smooth(aes(seal_data$Dietary.energy.density, seal_data$Mass.change), method="lm", se=F)
ggplot(seal_data) + geom_point(aes(seal_data$Diet.diversity, seal_data$Mass.change, color = seal_data$MomID)) +
labs(title = "Mass Change and Diet Diversity", x = "Diet Diveristy", y = "Mass Change") +
geom_smooth(aes(seal_data$Diet.diversity, seal_data$Mass.change), method="lm", se=F)
ggplot(seal_data) + geom_point(aes(seal_data$Diet.diversity, seal_data$Mass.change, color = seal_data$MomID)) +
labs(title = "Mass Change and Diet Diversity", x = "Diet Diveristy (no specific units for Shannon index)", y = "Mass Change (Kg)") +
geom_smooth(aes(seal_data$Diet.diversity, seal_data$Mass.change), method="lm", se=F)
# Mass Change + MomID
ggplot(seal_data) + geom_point(aes(seal_data$Mass.change, seal_data$MomID)) +
geom_smooth(aes(seal_data$Mass.change, seal_data$MomID), method="lm", se=F)
source("~/Desktop/IDPhD Classes/Stat 5620/Final Project/Proposal Presentation/Working Folder/R/R-Script/Mass Change.R", echo=TRUE)
ggplot(seal_data) + geom_point(aes(seal_data$MomID, seal_data$Diet.diversity, color = seal_data$MomID)) +
labs(title = "Mother ID and Diet Diversity", x = "Mother ID",
y = "Diet Diversity")
ggplot(seal_data) + geom_point(aes(seal_data$Dietary.energy.density, seal_data$Mass.change, color = seal_data$MomID)) +
labs(title = "Mass Change and Dietary Energy Density", x = "Dietary Energy Density (kJ/g of prey tissue)", y = "Mass Change (Kg)") +
geom_smooth(aes(seal_data$Dietary.energy.density, seal_data$Mass.change), method="lm", se=F)
ggplot(seal_data) + geom_point(aes(seal_data$Diet.diversity, seal_data$Mass.change, color = seal_data$MomID)) +
labs(title = "Mass Change and Diet Diversity", x = "Diet Diveristy (no specific units for Shannon index)", y = "Mass Change (Kg)") +
geom_smooth(aes(seal_data$Diet.diversity, seal_data$Mass.change), method="lm", se=F)
ggplot(seal_data) + geom_point(aes(seal_data$Year, seal_data$Mass.change, color = seal_data$MomID)) +
labs(title = "Mass Change and Year", x = "Year",
y = "Mass Change (Kg)")
ggplot(seal_data) + geom_point(aes(seal_data$Year, seal_data$Mass.change, color = seal_data$MomID)) +
labs(title = "Mass Change and Year", x = "Year", y = "Mass Change (Kg)") +
geom_smooth(aes(seal_data$Mass.change, seal_data$Mass.Year), method="lm", se=F)
ggplot(seal_data) + geom_point(aes(seal_data$Year, seal_data$Mass.change, color = seal_data$MomID)) +
labs(title = "Mass Change and Year", x = "Year", y = "Mass Change (Kg)") +
geom_smooth(aes(seal_data$Mass.change, seal_data$Year), method="lm", se=F)
ggplot(seal_data) + geom_point(aes(seal_data$Year, seal_data$Mass.change, color = seal_data$MomID)) +
labs(title = "Mass Change and Year", x = "Year", y = "Mass Change (Kg)")
ggplot(seal_data) + geom_point(aes(seal_data$Year, seal_data$Mass.change, color = seal_data$MomID)) +
labs(title = "Mass Change and Year", x = "Year", y = "Mass Change (Kg)") +
geom_smooth(aes(seal_data$Mass.change, seal_data$Year), method="lm", se=F)
ggplot(seal_data) + geom_point(aes(seal_data$Year, seal_data$Mass.change, color = seal_data$MomID)) +
labs(title = "Mass Change and Year", x = "Year", y = "Mass Change (Kg)") +
geom_smooth(aes(seal_data$Year, seal_data$Mass.change), method="lm", se=F)
ggplot(seal_data) + geom_point(aes(seal_data$Mass.change, seal_data$MomID)) +
geom_smooth(aes(seal_data$Mass.change, seal_data$MomID), method="lm", se=F)
ggplot(seal_data) + geom_point(aes(seal_data$Year, seal_data$Mass.change, color = seal_data$MomID)) +
labs(title = "Mass Change and Year", x = "Year", y = "Mass Change (Kg)") +
geom_smooth(aes(seal_data$Year, seal_data$Mass.change), method="lm", se=F)
ggplot(seal_data) + geom_point(aes(seal_data$Mass.change, seal_data$MomID)) +
geom_smooth(aes(seal_data$Mass.change, seal_data$MomID), method="lm", se=F)
ggplot(seal_data) + geom_point(aes(seal_data$Year, seal_data$Mass.change, color = seal_data$MomID)) +
labs(title = "Mass Change and Year", x = "Year", y = "Mass Change (Kg)") +
geom_smooth(aes(seal_data$Year, seal_data$Mass.change), method="lm", se=F)
ggplot(seal_data) + geom_point(aes(seal_data$MomID, seal_data$Mass.change)) +
labs(title = "Mass Change and Mom ID", x = "Mom ID", y = "Mass Change (Kg)")
geom_smooth(aes(seal_data$Mass.change, seal_data$MomID), method="lm", se=F)
ggplot(seal_data) + geom_point(aes(seal_data$MomID, seal_data$Mass.change)) +
labs(title = "Mass Change and Mom ID", x = "Mom ID", y = "Mass Change (Kg)")
geom_smooth(aes(seal_data$Mass.change, seal_data$MomID), method="lm", se=F)
ggplot(seal_data) + geom_point(aes(seal_data$MomID, seal_data$Mass.change)) +
labs(title = "Mass Change and Mom ID", x = "Mom ID", y = "Mass Change (Kg)")
geom_smooth(aes(seal_data$MomID, seal_data$Mass.change), method="lm", se=F)
ggplot(seal_data) + geom_point(aes(seal_data$MomID, seal_data$Mass.change)) +
labs(title = "Mass Change and Mom ID", x = "Mom ID", y = "Mass Change (Kg)")
geom_smooth(aes(seal_data$MomID, seal_data$Mass.change), method="lm", se=F)
seal_data$MomID = as.factor(seal_data$MomID)
ggplot(seal_data) + geom_point(aes(seal_data$MomID, seal_data$Mass.change)) +
labs(title = "Mass Change and Mom ID", x = "Mom ID", y = "Mass Change (Kg)")
geom_smooth(aes(seal_data$MomID, seal_data$Mass.change), method="lm", se=F)
ggplot(seal_data) + geom_point(aes(seal_data$MomID, seal_data$Mass.change)) +
labs(title = "Mass Change and Mom ID", x = "Mom ID", y = "Mass Change (Kg)")
geom_smooth(aes(seal_data$MomID, seal_data$Mass.change), method="lm", se=F)
ggplot(seal_data) + geom_point(aes(seal_data$Year, seal_data$Mass.change, color = seal_data$MomID)) +
labs(title = "Mass Change and Year", x = "Year", y = "Mass Change (Kg)") +
geom_smooth(aes(seal_data$Year, seal_data$Mass.change), method="lm", se=F)
ggplot(seal_data) + geom_point(aes(seal_data$Diet.diversity, seal_data$Mass.change, color = seal_data$MomID)) +
labs(title = "Mass Change and Diet Diversity", x = "Diet Diveristy (no specific units for Shannon index)", y = "Mass Change (Kg)") +
geom_smooth(aes(seal_data$Diet.diversity, seal_data$Mass.change), method="lm", se=F)
ggplot(seal_data) + geom_point(aes(seal_data$Dietary.energy.density, seal_data$Mass.change, color = seal_data$MomID)) +
labs(title = "Mass Change and Dietary Energy Density", x = "Dietary Energy Density (kJ/g of prey tissue)", y = "Mass Change (Kg)") +
geom_smooth(aes(seal_data$Dietary.energy.density, seal_data$Mass.change), method="lm", se=F)
# Mass Change + Diet Diveristy
ggplot(seal_data) + geom_point(aes(seal_data$Diet.diversity, seal_data$Mass.change, color = seal_data$MomID)) +
labs(title = "Mass Change and Diet Diversity", x = "Diet Diveristy (no specific units for Shannon index)", y = "Mass Change (Kg)") +
geom_smooth(aes(seal_data$Diet.diversity, seal_data$Mass.change), method="lm", se=F)
ggplot(seal_data) + geom_point(aes(seal_data$Year, seal_data$Mass.change, color = seal_data$MomID)) +
labs(title = "Mass Change and Year", x = "Year", y = "Mass Change (Kg)") +
geom_smooth(aes(seal_data$Year, seal_data$Mass.change), method="lm", se=F)
ggplot(seal_data) + geom_point(aes(seal_data$MomID, seal_data$Mass.change)) +
labs(title = "Mass Change and Mom ID", x = "Mom ID", y = "Mass Change (Kg)")
geom_smooth(aes(seal_data$MomID, seal_data$Mass.change), method="lm", se=F)
ggplot(seal_data) + geom_point(aes(seal_data$MomID, seal_data$Mass.change)) +
labs(title = "Mass Change and Mom ID", x = "Mom ID", y = "Mass Change (Kg)")
ggplot(seal_data) + geom_point(aes(seal_data$MomID, seal_data$Mass.change)) +
labs(title = "Mass Change and Mom ID", x = "Mom ID", y = "Mass Change (Kg)")
geom_smooth(aes(seal_data$MomID, seal_data$Mass.change), method="lm", se=F)
ggplot(seal_data) + geom_point(aes(seal_data$MomID, seal_data$Diet.diversity, color = seal_data$MomID)) +
labs(title = "Mother ID and Diet Diversity", x = "Mother ID",
y = "Diet Diversity")
ggplot(seal_data) + geom_point(aes(seal_data$Dietary.energy.density, seal_data$Mass.change, color = seal_data$MomID)) +
labs(title = "Mass Change and Dietary Energy Density", x = "Dietary Energy Density (kJ/g of prey tissue)", y = "Mass Change (Kg)") +
geom_smooth(aes(seal_data$Dietary.energy.density, seal_data$Mass.change), method="lm", se=F)
ggplot(seal_data) + geom_point(aes(seal_data$Diet.diversity, seal_data$Mass.change, color = seal_data$MomID)) +
labs(title = "Mass Change and Diet Diversity", x = "Diet Diveristy (no specific units for Shannon index)", y = "Mass Change (Kg)") +
geom_smooth(aes(seal_data$Diet.diversity, seal_data$Mass.change), method="lm", se=F)
ggplot(seal_data) + geom_point(aes(seal_data$Year, seal_data$Mass.change, color = seal_data$MomID)) +
labs(title = "Mass Change and Year", x = "Year", y = "Mass Change (Kg)") +
geom_smooth(aes(seal_data$Year, seal_data$Mass.change), method="lm", se=F)
ggplot(seal_data) + geom_point(aes(seal_data$MomID, seal_data$Mass.change)) +
labs(title = "Mass Change and Mom ID", x = "Mom ID", y = "Mass Change (Kg)")
geom_smooth(aes(seal_data$MomID, seal_data$Mass.change), method="lm", se=F)
ggplot(seal_data) + geom_point(aes(seal_data$Dominant.prey.species, seal_data$Mass.change)) +
labs(title = "Mass Change and Mom ID", x = "Dominant Prey Species", y = "Mass Change (Kg)")
geom_smooth(aes(seal_data$Dominant.prey.species, seal_data$Mass.change), method="lm", se=F)
ggplot(seal_data) + geom_point(aes(seal_data$Dominant.prey.species, seal_data$Mass.change)) +
labs(title = "Mass Change and Dominant Prey Species", x = "Dominant Prey Species", y = "Mass Change (Kg)")
geom_smooth(aes(seal_data$Dominant.prey.species, seal_data$Mass.change), method="lm", se=F)
ggplot(seal_data) + geom_point(aes(seal_data$MomID, seal_data$Mass.change)) +
labs(title = "Mass Change and Mom ID", x = "Mom ID", y = "Mass Change (Kg)")
geom_smooth(aes(seal_data$MomID, seal_data$Mass.change), method="lm", se=F)
Q1 = lm(seal_data$Mass.change ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity + seal_data$Dietary.energy.density
+ seal_data$Year + seal_data$MomID,
data = seal_data)
summary(Q1)
plot(Q1)
seal_data$MomID = (seal_data$MomID)
Q1 = lm(seal_data$Mass.change ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity + seal_data$Dietary.energy.density
+ seal_data$Year + seal_data$MomID,
data = seal_data)
summary(Q1)
seal_data$MomID = as.numeric(seal_data$MomID)
Q1 = lm(seal_data$Mass.change ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity + seal_data$Dietary.energy.density
+ seal_data$Year + seal_data$MomID,
data = seal_data)
summary(Q1)
seal_data$MomID = as.factor(seal_data$MomID)
seal_data$MomID = as.factor(seal_data$Year)
seal_data$MomID = as.factor(seal_data$Dominant.prey.species)
Q1 = lm(seal_data$Mass.change ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity + seal_data$Dietary.energy.density
+ seal_data$Year + seal_data$MomID,
data = seal_data)
summary(Q1)
plot(Q1)
Pois = glm (seal_data$Mass.change ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity + seal_data$Dietary.energy.density
+ seal_data$Year + seal_data$MomID, data = seal_data) family = guassian)
Pois = glm (seal_data$Mass.change ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity + seal_data$Dietary.energy.density
+ seal_data$Year + seal_data$MomID, data = seal_data, family = guassian)
Pois = glm (seal_data$Mass.change ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity + seal_data$Dietary.energy.density
+ seal_data$Year + seal_data$MomID, data = seal_data, family = gaussian)
Guas = glm (seal_data$Mass.change ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity + seal_data$Dietary.energy.density
+ seal_data$Year + seal_data$MomID, data = seal_data, family = gaussian)
summary (Gaus)
summary (Guas)
Q1 = lm(seal_data$Mass.change ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity + seal_data$Dietary.energy.density
+ seal_data$Year + seal_data$MomID,
data = seal_data)
summary(Q1)
Gaus = glm (seal_data$Mass.change ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity + seal_data$Dietary.energy.density
+ seal_data$Year + seal_data$MomID, data = seal_data, family = gaussian)
summary (Gaus)
plot (Gaus)
fwd.model = step(Gaus, direction='forward')
backward.model = step(Gaus, direction='backward')
fwd.model = step(Gaus, direction='forward')
Gaus_reduced = glm (seal_data$Mass.change ~ seal_data$Dominant.prey.species, family = gaussian)
summmary (Gaus_reduced)
summmary(Gaus_reduced)
Gaus_reduced = glm (seal_data$Mass.change ~ seal_data$Dominant.prey.species, family = gaussian)
summmary(Gaus_reduced)
Gaus_reduced = glm (seal_data$Mass.change ~ seal_data$Dominant.prey.species, data = seal_data, family = gaussian)
summmary(Gaus_reduced)
Gaus_reduced = glm (seal_data$Mass.change ~ seal_data$Dominant.prey.species, data = seal_data, family = gaussian)
Q1_A = glm (seal_data$Mass.change ~ seal_data$Dominant.prey.species, data = seal_data, family = gaussian)
summmary(Q1_A)
summary (Q1_A)
plot (Q1_A)
ggplot(seal_data) + geom_point(aes(seal_data$Dietary.energy.density, seal_data$Mass.change, color = seal_data$MomID)) +
labs(title = "Mass Change and Dietary Energy Density", x = "Dietary Energy Density (kJ/g of prey tissue)", y = "Mass Change (Kg)") +
geom_smooth(aes(seal_data$Dietary.energy.density, seal_data$Mass.change), method="lm", se=F)
summary (Q1_A)
Gaus_mixed_full = glmer(Mass.change ~ Dominant.prey.species + Diet.diversity + Dietary.energy.density
+ (1 | Year) + ( 1 | MomID), data = seal_data, family = gaussian)
library(lme4)
Gaus_mixed_full = glmer(Mass.change ~ Dominant.prey.species + Diet.diversity + Dietary.energy.density
+ (1 | Year) + ( 1 | MomID), data = seal_data, family = gaussian)
Gaus_mixed_full = glmer(Mass.change ~ Dominant.prey.species + Diet.diversity + Dietary.energy.density
+ (1 | Year +  MomID), data = seal_data, family = gaussian)
Gaus_mixed_full = glmer(Mass.change ~ Dominant.prey.species + Diet.diversity + Dietary.energy.density
+ (1 | Year) + (1 | MomID), data = seal_data, family = gaussian)
summary(Gaus_mixed_full)
seal_data$MomID = as.numerical(seal_data$MomID)
>>>>>>> 0e2f625240145a12b5416285ff79419ddfe67981
seal_data$MomID = as.factor(seal_data$MomID)
seal_data$Year = as.factor(seal_data$Year)
seal_data$Dominant.prey.species = as.factor(seal_data$Dominant.prey.species)
Q1 = lm(seal_data$Pup.Wean.Mass ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity + seal_data$Dietary.energy.density
+ seal_data$Year + seal_data$Mom.Age + seal_data$Pup.sex, data = seal_data)
summary(Q1)
Q1 = lm(seal_data$Pup.Wean.Mass ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity + seal_data$Dietary.energy.density
+ seal_data$Year + seal_data$Mom.Age + seal_data$Pup.sex + seal_data$MomID, data = seal_data)
summary(Q1)
seal_data$MomID = as.factor(seal_data$MomID)
seal_data$Year = as.factor(seal_data$Year)
seal_data$Dominant.prey.species = as.factor(seal_data$Dominant.prey.species)
seal_data$Pup.sex = as.factor(seal_data$Pup.sex)
Q1 = lm(seal_data$Pup.Wean.Mass ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity + seal_data$Dietary.energy.density
+ seal_data$Year + seal_data$Mom.Age + seal_data$Pup.sex + seal_data$MomID, data = seal_data)
summary(Q1)
Q2 = lm(seal_data$Pup.Wean.Mass ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity + seal_data$Dietary.energy.density
+  seal_data$Mom.Age + seal_data$Pup.sex + seal_data$MomID, data = seal_data)
summary (Q2)
Q2 = lm(seal_data$Pup.Wean.Mass ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity + seal_data$Dietary.energy.density
+ seal_data$Year +  seal_data$Mom.Age + seal_data$Pup.sex , data = seal_data)
Q3 = lm(seal_data$Pup.Wean.Mass ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity + seal_data$Dietary.energy.density
+ seal_data$Mom.Age + seal_data$Pup.sex , data = seal_data)
summary (Q2)
Q3 = lm(seal_data$Pup.Wean.Mass ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity + seal_data$Dietary.energy.density
+  seal_data$Mom.Age + seal_data$Pup.sex + seal_data$MomID, data = seal_data)
summary (Q3)
Q1 = lm(seal_data$Pup.Wean.Mass ~  seal_data$Diet.diversity + seal_data$Dietary.energy.density
+ seal_data$Year + seal_data$Mom.Age + seal_data$Pup.sex + seal_data$MomID, data = seal_data)
Q4 = lm(seal_data$Pup.Wean.Mass ~  seal_data$Diet.diversity + seal_data$Dietary.energy.density
+ seal_data$Year + seal_data$Mom.Age + seal_data$Pup.sex + seal_data$MomID, data = seal_data)
summary (Q4)
Q4 = lm(seal_data$Pup.Wean.Mass ~  seal_data$Diet.diversity + seal_data$Dietary.energy.density
+ seal_data$Year + seal_data$Mom.Age + seal_data$Pup.sex + seal_data$MomID, data = seal_data)
summary (Q4)
Q1 = lm(seal_data$Pup.Wean.Mass ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity + seal_data$Dietary.energy.density
+ seal_data$Year + seal_data$Mom.Age + seal_data$Pup.sex + seal_data$MomID, data = seal_data)
Q2 = lm(seal_data$Pup.Wean.Mass ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity + seal_data$Dietary.energy.density
+ seal_data$Year +  seal_data$Mom.Age + seal_data$Pup.sex , data = seal_data)
summary (Q2)
fwd.model = step (Q2, direction='forward')
backward.model = step(Q1, direction='backward')
backward.model = step(Q2, direction='backward')
fwd.model = step (Q2, direction='forward')
backward.model = step(Q2, direction='backward')
Q1_Reduced = lm(seal_data$Pup.Wean.Mass ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity,
data = seal_data)
summary(Q1_Reduced)
Q1A = glm (seal_data$Pup.Wean.Mass ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity + seal_data$Dietary.energy.density
+ seal_data$Year + seal_data$Mom.Age + seal_data$Pup.sex + seal_data$MomID, data = seal_data, family = gaussian)
summary (Q1A)
Q2A = glm (seal_data$Pup.Wean.Mass ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity + seal_data$Dietary.energy.density
+ seal_data$Year + seal_data$Mom.Age + seal_data$Pup.sex + seal_data$MomID, data = seal_data, family = gaussian)
summary (Q2A)
summary (Q2A)
Q2B = glm (seal_data$Pup.Wean.Mass ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity + seal_data$Dietary.energy.density
+ seal_data$Year + seal_data$Mom.Age + seal_data$Pup.sex, data = seal_data, family = gaussian)
summary (Q2B)
Q2C = glm (seal_data$Pup.Wean.Mass ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity + seal_data$Dietary.energy.density
+ seal_data$Mom.Age + seal_data$Pup.sex + seal_data$MomID, data = seal_data, family = gaussian)
summary (Q2C)
fwd.model = step(Q2C, direction='forward')
fwd.model = step(Q2B, direction='forward')
backward.model = step(Q2B, direction='backward')
Q2D = glm (seal_data$Pup.Wean.Mass ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity, family = gaussian)
summary (Q2D)
? lm
? glm
rm(list=ls())
# Load Data
seal_data = read.csv("Data_Q2.csv", header = T)
setwd("~/Desktop/IDPhD Classes/Stat 5620/Final Project/Proposal Presentation/Working Folder/Final Assignment/Processed_Data")
# Clear Workspace
rm(list=ls())
# Load Data
seal_data = read.csv("Data_Q2.csv", header = T)
summary(seal_data)
seal_data
# Plot varibles to see distributions of predictor and response variables
require(flexplot)
# data = seal_data
names (seal_data)
[1] "MomID"                  "Year"                   "Dietary.energy.density" "Diet.diversity"
require(flexplot)
a = flexplot (MomID~1, data= seal_data)
b = flexplot (Year~1, data= seal_data)
c = flexplot (Dietary.energy.density~1, data= seal_data)
d = flexplot (Diet.diversity~1, data= seal_data)
e = flexplot (Dominant.prey.species~1, data= seal_data)
f = flexplot (Mom.Age~1, data= seal_data)
g = flexplot (Pup.sex~1, data= seal_data)
h = flexplot (Pup.Wean.Mass~1, data= seal_data)
require (cowplot)
plot_grid(a,b,c,d,e,f,g,h)
# Pup Wean Mass + Dietary.energy.density
ggplot(seal_data) + geom_point(aes(seal_data$Dietary.energy.density, seal_data$Pup.Wean.Mass, color = MomID)) +
labs(title = "Pup Wean Mass and Dietary Energy Density", x = "Dietary Energy Density (kJ/g of prey tissue)", y = "Pup Wean Mass (Kg)") +
geom_smooth(aes(seal_data$Dietary.energy.density, seal_data$Pup.Wean.Mass), method="lm", se=T)
require(ggplot2)
ggplot(seal_data) + geom_point(aes(seal_data$Dietary.energy.density, seal_data$Pup.Wean.Mass, color = MomID)) +
labs(title = "Pup Wean Mass and Dietary Energy Density", x = "Dietary Energy Density (kJ/g of prey tissue)", y = "Pup Wean Mass (Kg)") +
geom_smooth(aes(seal_data$Dietary.energy.density, seal_data$Pup.Wean.Mass), method="lm", se=T)
ggplot(seal_data) + geom_point(aes(seal_data$Diet.diversity, seal_data$Pup.Wean.Mass, color = seal_data$MomID)) +
labs(title = "Pup Wean Mass and Diet Diversity", x = "Diet Diveristy (no specific units for Shannon index)", y = "Pup Wean Mass (Kg)") +
geom_smooth(aes(seal_data$Diet.diversity, seal_data$Pup.Wean.Mass), method="lm", se=T)
ggplot(seal_data) + geom_point(aes(seal_data$Year, seal_data$Pup.Wean.Mass, color = seal_data$MomID)) +
labs(title = "Pup Wean Mass and Year", x = "Year", y = "Pup Wean Mass (Kg)") +
geom_smooth(aes(seal_data$Year, seal_data$Pup.Wean.Mass), method="lm", se=T)
ggplot(seal_data) + geom_point(aes(seal_data$Dietary.energy.density, seal_data$Pup.Wean.Mass, color = MomID)) +
labs(title = "Pup Wean Mass and Dietary Energy Density", x = "Dietary Energy Density (kJ/g of prey tissue)", y = "Pup Wean Mass (Kg)") +
geom_smooth(aes(seal_data$Dietary.energy.density, seal_data$Pup.Wean.Mass), method="lm", se=T)
ggplot(seal_data) + geom_point(aes(seal_data$Diet.diversity, seal_data$Pup.Wean.Mass, color = seal_data$MomID)) +
labs(title = "Pup Wean Mass and Diet Diversity", x = "Diet Diveristy (no specific units for Shannon index)", y = "Pup Wean Mass (Kg)") +
geom_smooth(aes(seal_data$Diet.diversity, seal_data$Pup.Wean.Mass), method="lm", se=T)
ggplot(seal_data) + geom_point(aes(seal_data$Year, seal_data$Pup.Wean.Mass, color = seal_data$MomID)) +
labs(title = "Pup Wean Mass and Year", x = "Year", y = "Pup Wean Mass (Kg)") +
geom_smooth(aes(seal_data$Year, seal_data$Pup.Wean.Mass), method="lm", se=T)
ggplot(seal_data) + geom_point(aes(seal_data$MomID, seal_data$Pup.Wean.Mass)) +
labs(title = "Pup Wean Mass and Mom ID", x = "Mom ID", y = "Pup Wean Mass (Kg)") +
geom_smooth(aes(seal_data$MomID, seal_data$Pup.Wean.Mass), method="lm", se=T)
ggplot(seal_data) + geom_point(aes(seal_data$Dominant.prey.species, seal_data$Pup.Wean.Mass)) +
labs(title = "Pup Wean Mass and Dominant Prey Species", x = "Dominant Prey Species", y = "Pup Wean Mass (Kg)")
ggplot(seal_data) + geom_point(aes(seal_data$Pup.sex, seal_data$Pup.Wean.Mass)) +
labs(title = "Pup Wean Mass and Pup Sex", x = "Pup Sex", y = "Pup Wean Mass (Kg)") +
geom_smooth(aes(seal_data$Pup.sex, seal_data$Pup.Wean.Mass), method="lm", se=T)
ggplot(seal_data) + geom_point(aes(seal_data$Mom.Age, seal_data$Pup.Wean.Mass)) +
labs(title = "Pup Wean Mass and Maternal Age", x = "Maternal Age", y = "Pup Wean Mass (Kg)") +
geom_smooth(aes(seal_data$Mom.Age, seal_data$Pup.Wean.Mass), method="lm", se=T)
Q1 = lm(seal_data$Pup.Wean.Mass ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity + seal_data$Dietary.energy.density
+ seal_data$Year + seal_data$Mom.Age + seal_data$Pup.sex + seal_data$MomID, data = seal_data)
summary(Q1)
seal_data$MomID = as.factor(seal_data$MomID)
seal_data$Year = as.factor(seal_data$Year)
seal_data$Dominant.prey.species = as.factor(seal_data$Dominant.prey.species)
seal_data$Pup.sex = as.factor(seal_data$Pup.sex)
Q1 = lm(seal_data$Pup.Wean.Mass ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity + seal_data$Dietary.energy.density
+ seal_data$Year + seal_data$Mom.Age + seal_data$Pup.sex + seal_data$MomID, data = seal_data)
summary(Q1)
Q2 = lm(seal_data$Pup.Wean.Mass ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity + seal_data$Dietary.energy.density
+ seal_data$Year +  seal_data$Mom.Age + seal_data$Pup.sex , data = seal_data)
summary (Q2)
Q3 = lm(seal_data$Pup.Wean.Mass ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity + seal_data$Dietary.energy.density
+  seal_data$Mom.Age + seal_data$Pup.sex + seal_data$MomID, data = seal_data)
summary (Q3)
Q4 = lm(seal_data$Pup.Wean.Mass ~  seal_data$Diet.diversity + seal_data$Dietary.energy.density
+ seal_data$Year + seal_data$Mom.Age + seal_data$Pup.sex + seal_data$MomID, data = seal_data)
fwd.model = step (Q2, direction='forward')
backward.model = step(Q2, direction='backward')
Q1_Reduced = lm(seal_data$Pup.Wean.Mass ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity,
data = seal_data)
summary(Q1_Reduced)
Q2A = glm (seal_data$Pup.Wean.Mass ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity + seal_data$Dietary.energy.density
+ seal_data$Year + seal_data$Mom.Age + seal_data$Pup.sex + seal_data$MomID, data = seal_data, family = gaussian)
summary (Q2A)
Q2B = glm (seal_data$Pup.Wean.Mass ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity + seal_data$Dietary.energy.density
+ seal_data$Year + seal_data$Mom.Age + seal_data$Pup.sex, data = seal_data, family = gaussian)
summary (Q2B)
Q2C = glm (seal_data$Pup.Wean.Mass ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity + seal_data$Dietary.energy.density
+ seal_data$Mom.Age + seal_data$Pup.sex + seal_data$MomID, data = seal_data, family = gaussian)
summary (Q2C)
Q2C = glm (seal_data$Pup.Wean.Mass ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity + seal_data$Dietary.energy.density
+ seal_data$Mom.Age + seal_data$Pup.sex + seal_data$MomID, data = seal_data, family = gaussian)
summary (Q2C)
Q2D = glm (seal_data$Pup.Wean.Mass ~ seal_data$Diet.diversity + seal_data$Dietary.energy.density
+ seal_data$Year + seal_data$Mom.Age + seal_data$Pup.sex + seal_data$MomID, data = seal_data, family = gaussian)
summary (Q2D)
Q2E = glm (seal_data$Pup.Wean.Mass ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity + seal_data$Dietary.energy.density
+ seal_data$Year + seal_data$Pup.sex, data = seal_data, family = gaussian)
summary (Q2E)
Q2F = glm (seal_data$Pup.Wean.Mass ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity + seal_data$Dietary.energy.density
+ seal_data$Year + seal_data$Mom.Age + seal_data$MomID, data = seal_data, family = gaussian)
summary (Q2F)
Q2G = glm (seal_data$Pup.Wean.Mass ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity + seal_data$Dietary.energy.density
+ seal_data$Year + seal_data$Pup.sex, data = seal_data, family = gaussian)
summary (Q2G)
fwd.model = step(Q2E, direction='forward')
backward.model = step(Q2E, direction='backward')
Q2H = glm (seal_data$Pup.Wean.Mass ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity, family = gaussian)
summary (Q2H)
require(lme4)
Q2A = glmm(Pup.Wean.Mass ~  Diet.diversity + Dietary.energy.density + (1 | Dominant.prey.species)
+ (1 | Year) + (1 | Mom.Age) + (1 | Pup.sex) + (1 | MomID), data = seal_data, family = gaussian)
Q2A = glmer(Pup.Wean.Mass ~  Diet.diversity + Dietary.energy.density + (1 | Dominant.prey.species)
+ (1 | Year) + (1 | Mom.Age) + (1 | Pup.sex) + (1 | MomID), data = seal_data, family = gaussian)
GLMM_A = glmer(Pup.Wean.Mass ~  Diet.diversity + Dietary.energy.density + (1 | Dominant.prey.species)
+ (1 | Year) + (1 | Mom.Age) + (1 | Pup.sex) + (1 | MomID), data = seal_data, family = gaussian)
summary(GLMM_A)
compare.fits(Q2H,GLMM_A)
Q2H = glm (seal_data$Pup.Wean.Mass ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity, family = gaussian)
summary (Q2H)
compare.fits(Q2H,GLMM_A)
compare.fits(GLMM_A)
summary(GLMM_A)
model.comparison(GLMM_A, Q2H)
fwd.model = step(GGLM_A, direction='forward')
fwd.model = step(GLMM_A, direction='forward')
fwd.model = step(GLMM_A, direction='forward')
backward.model = step(GLMM_A, direction='backward')
step(GLMM_A, direction='forward')
GLMM_B = glmer(Pup.Wean.Mass ~  Diet.diversity + Dietary.energy.density + (1 | Dominant.prey.species)
+ (1 | Year) + (1 | Mom.Age) + (1 | Pup.sex), data = seal_data, family = gaussian)
Q2H    363.539 379.742        1.686
fwd.model = step(GLMM_A, direction='forward')
backward.model = step(GLMM_A, direction='backward')
GLMM_=B = glmer(Pup.Wean.Mass ~  Diet.diversity + Dietary.energy.density + (1 | Dominant.prey.species)
+ (1 | Year) + (1 | Mom.Age) + (1 | Pup.sex), data = seal_data, family = gaussian)
summary(GLMM_B)
model.comparison(GLMM_A, GLMM_B)
GLMM_=C = glmer(Pup.Wean.Mass ~  Diet.diversity + Dietary.energy.density + (1 | Dominant.prey.species)
+ (1 | Year) +  (1 | Pup.sex), data = seal_data, family = gaussian)
model.comparison(GLMM_B, GLMM_C)
GLMM_=C = glmer(Pup.Wean.Mass ~  Diet.diversity + Dietary.energy.density + (1 | Dominant.prey.species)
+ (1 | Year) +  (1 | Pup.sex), data = seal_data, family = gaussian)
model.comparison(GLMM_B, GLMM_C)
GLMM_C = glmer(Pup.Wean.Mass ~  Diet.diversity + Dietary.energy.density + (1 | Dominant.prey.species)
+ (1 | Year) +  (1 | Pup.sex), data = seal_data, family = gaussian)
model.comparison(GLMM_B, GLMM_C)
GLMM_D = glmer(Pup.Wean.Mass ~  Diet.diversity + Dietary.energy.density + (1 | Dominant.prey.species)
+ (1 | Pup.sex), data = seal_data, family = gaussian)
model.comparison(GLMM_C, GLMM_D)
GLMM_E = glmer(Pup.Wean.Mass ~  Diet.diversity + Dietary.energy.density + (1 | Dominant.prey.species) ,
data = seal_data, family = gaussian)
model.comparison(GLMM_D, GLMM_E)
GLMM_F = glmer(Pup.Wean.Mass ~  Diet.diversity + (1 | Dominant.prey.species) ,
data = seal_data, family = gaussian)
model.comparison(GLMM_E, GLMM_F)
GLMM_G = glmer(Pup.Wean.Mass ~  Dietary.energy.density + (1 | Dominant.prey.species) ,
data = seal_data, family = gaussian)
model.comparison(GLMM_E, GLMM_G)
GLMM_H = glmer(Pup.Wean.Mass ~  Diet.diversity + Dietary.energy.density,
data = seal_data, family = gaussian)
model.comparison(GLMM_E, GLMM_H)
GLMM_H = glmer(Pup.Wean.Mass ~  Diet.diversity + Dietary.energy.density,
data = seal_data, family = gaussian)
model.comparison(GLMM_E, GLMM_H)
GLMM_H = glmer(Pup.Wean.Mass ~  Diet.diversity + Dietary.energy.density,
data = seal_data, family = gaussian)
model.comparison(GLMM_E,Q1_Reduced )
model.comparison(GLMM_E,Q2H)
# Clear Workspace
rm(list=ls())
# Load Data
seal_data = read.csv("Data_Q2.csv", header = T)
setwd("~/Desktop/IDPhD Classes/Stat 5620/Final Project/Proposal Presentation/Working Folder/Final Assignment/Processed_Data")
# Load Data
seal_data = read.csv("Data_Q2.csv", header = T)
summary(seal_data)
seal_data
seal_data$MomID
summary(seal_data$MomID)
nlevels(seal_data$MomID)
levels(seal_data$MomID)
seal_data$MomID = as.factor(seal_data$MomID)
seal_data$Year = as.factor(seal_data$Year)
seal_data$Dominant.prey.species = as.factor(seal_data$Dominant.prey.species)
seal_data$Pup.sex = as.factor(seal_data$Pup.sex)
seal_data$MomID = as.factor(seal_data$MomID)
levels(seal_data$MomID)
nlevels(seal_data$MomID)
nlevels(seal_data$Year)
nlevels(seal_data$Dominant.prey.species)
nlevels(seal_data$Dominant.Pup.sex)
seal_data$Pup.sex = as.factor(seal_data$Pup.sex)
nlevels(seal_data$Dominant.Pup.sex)
seal_data = read.csv("Data_Q2.csv", header = T)
summary(seal_data)
seal_data
seal_data$Pup.sex = as.factor(seal_data$Pup.sex)
seal_data$Pup.Mom.Age = as.factor(seal_data$Mom.Age)
nlevels(seal_data$Mom_Age)
seal_data$Pup.Mom.Age = as.factor(seal_data$Mom.Age)
nlevels(seal_data$Mom_Age)
nlevels(seal_data$Mom.Age)
nlevels(seal_data$Pup.Mom.Age)
nlevels(seal_data$seal_data$Pup.sex)
seal_data$MomID = as.factor(seal_data$MomID)
seal_data$Year = as.factor(seal_data$Year)
seal_data$Dominant.prey.species = as.factor(seal_data$Dominant.prey.species)
seal_data$Pup.sex = as.factor(seal_data$Pup.sex)
seal_data$Pup.Mom.Age = as.factor(seal_data$Mom.Age)
nlevelsseal_data$Pup.sex)
nlevels(seal_data$Pup.sex)
Q1A_A = glm (seal_data$Mass.change ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity + seal_data$Dietary.energy.density
+ seal_data$Year , data = seal_data, family = gaussian)
seal_data = read.csv("Data_Q1.csv", header = T)
seal_data = read.csv("Data_Q1.csv", header = T)
setwd("~/Desktop/IDPhD Classes/Stat 5620/Final Project/Proposal Presentation/Working Folder/Final Assignment")
seal_data = read.csv("Data_Q1.csv", header = T)
setwd("~/Desktop/IDPhD Classes/Stat 5620/Final Project/Proposal Presentation/Working Folder/Final Assignment/Processed_Data")
seal_data = read.csv("Data_Q1.csv", header = T)
summary(seal_data)
seal_data$MomID = as.factor(seal_data$MomID)
seal_data$Year = as.factor(seal_data$Year)
seal_data$Dominant.prey.species = as.factor(seal_data$Dominant.prey.species)
Q1A = glm (seal_data$Mass.change ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity + seal_data$Dietary.energy.density
+ seal_data$Year + seal_data$MomID, data = seal_data, family = gaussian)
<<<<<<< HEAD
Q1A
Q1A_A = glm (seal_data$Mass.change ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity + seal_data$Dietary.energy.density
+ seal_data$Year , data = seal_data, family = gaussian)
summary (Q1A_A)
plot (Q1A_A)
Q1A_A = glm (seal_data$Mass.change ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity + seal_data$Dietary.energy.density
+ seal_data$Year , data = seal_data, family = gaussian, link  = log)
Q1A_A = glm (seal_data$Mass.change ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity + seal_data$Dietary.energy.density
+ seal_data$Year , data = seal_data, family = gaussian(link = log))
Q1A_A = glm (seal_data$Mass.change ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity + seal_data$Dietary.energy.density
+ seal_data$Year , data = seal_data, family = gaussian(link = "log"))
Q1A_A = glm (seal_data$Mass.change ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity + seal_data$Dietary.energy.density
+ seal_data$Year , data = seal_data, family = gaussian)
Q1A_A = glm (seal_data$Mass.change ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity + seal_data$Dietary.energy.density
+ seal_data$Year , data = seal_data, family = gaussian(link ="log"))
Q1A_A = glm (seal_data$Mass.change ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity + seal_data$Dietary.energy.density
+ seal_data$Year , data = seal_data, family = gaussian(link ="identity"))
Q1A_A = glm (seal_data$Mass.change ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity + seal_data$Dietary.energy.density
+ seal_data$Year , data = seal_data, family = gamma))
Q1A_A = glm (seal_data$Mass.change ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity + seal_data$Dietary.energy.density
+ seal_data$Year , data = seal_data, family = gamma)
Q1A_A = glm (seal_data$Mass.change ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity + seal_data$Dietary.energy.density
+ seal_data$Year , data = seal_data, family = gamma (link = log))
setwd("~/Desktop/IDPhD Classes/Stat 5620/Final Project/Proposal Presentation/Working Folder/Final Assignment/Processed_Data")
require(flexplot)
# data = seal_data
names (seal_data)
seal_data = read.csv("Data_Q2.csv", header = T)
summary(seal_data)
seal_data
seal_data
ggplot(seal_data) + geom_point(aes(seal_data$Dietary.energy.density, seal_data$Pup.Wean.Mass, color = Dominant.prey.species)) +
labs(title = "Pup Wean Mass and Dietary Energy Density", x = "Dietary Energy Density (kJ/g of prey tissue)", y = "Pup Wean Mass (Kg)") +
geom_smooth(aes(seal_data$Dietary.energy.density, seal_data$Pup.Wean.Mass), method="lm", se=T)
require(ggplot2)
ggplot(seal_data) + geom_point(aes(seal_data$Dietary.energy.density, seal_data$Pup.Wean.Mass, color = Dominant.prey.species)) +
labs(title = "Pup Wean Mass and Dietary Energy Density", x = "Dietary Energy Density (kJ/g of prey tissue)", y = "Pup Wean Mass (Kg)") +
geom_smooth(aes(seal_data$Dietary.energy.density, seal_data$Pup.Wean.Mass), method="lm", se=T)
ggplot(seal_data) + geom_point(aes(seal_data$Dominant.prey.species$AtlanticCod, seal_data$Pup.Wean.Mass)) +
labs(title = "Pup Wean Mass and Dominant Prey Species", x = "Dominant Prey Species", y = "Pup Wean Mass (Kg)")
require(jtools)
install.packages("jtools")
require(jtools)
interac_plot(Q1_Reduced, pred = seal_data$Dominant.prey.species, modx = seal_data$Dominant.prey.species )
interaction.plot(Q1_Reduced, pred = seal_data$Dominant.prey.species, modx = seal_data$Dominant.prey.species )
Q1_Reduced = lm(seal_data$Pup.Wean.Mass ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity,
data = seal_data)
interaction.plot(Q1_Reduced, pred = seal_data$Dominant.prey.species, modx = seal_data$Dominant.prey.species )
seal_data$MomID = as.factor(seal_data$MomID)
seal_data$Year = as.factor(seal_data$Year)
seal_data$Dominant.prey.species = as.factor(seal_data$Dominant.prey.species)
seal_data$Pup.sex = as.factor(seal_data$Pup.sex)
seal_data$Pup.Mom.Age = as.factor(seal_data$Mom.Age)
interaction.plot(Q1_Reduced, pred = seal_data$Dominant.prey.species, modx = seal_data$Dominant.prey.species )
interaction.plot(Q1_Reduced, pred = seal_data$Dominant.prey.species, modx = seal_data$Dominant.prey.species, trace.factor = T )
interaction.plot(Q1_Reduced, pred = seal_data$Dominant.prey.species, modx = seal_data$Dominant.prey.species, plot.points = T )
?"interaction.plot"
interact_plot(Q1_Reduced, pred = seal_data$Diet.diversity, modx =seal_data$Dominant.prey.species)
library(jtools)
interact_plot(Q1_Reduced, pred = seal_data$Diet.diversity, modx =seal_data$Dominant.prey.species)
qplot (seal_data$Dominant.prey.species, Q1_Reduced)
qplot (seal_data$Dominant.prey.species, Q1_Reduced)
ggplot(seal_data) + geom_point(aes(seal_data$Dietary.energy.density, seal_data$Pup.Wean.Mass, color = Dominant.prey.species)) +
labs(title = "Pup Wean Mass and Dietary Energy Density", x = "Dietary Energy Density (kJ/g of prey tissue)", y = "Pup Wean Mass (Kg)") +
geom_smooth(aes(seal_data$Dietary.energy.density, seal_data$Pup.Wean.Mass), method="lm", se=T)
ggplot(seal_data) + geom_point(aes(seal_data$Dietary.energy.density, seal_data$Pup.Wean.Mass, color = Dominant.prey.species)) +
labs(title = "Pup Wean Mass and Dietary Energy Density", x = "Dietary Energy Density (kJ/g of prey tissue)", y = "Pup Wean Mass (Kg)") +
geom_smooth( method="lm", se=T)
ggplot(seal_data) + geom_point(aes(seal_data$Dietary.energy.density, seal_data$Pup.Wean.Mass, color = Dominant.prey.species)) +
labs(title = "Pup Wean Mass and Dietary Energy Density", x = "Dietary Energy Density (kJ/g of prey tissue)", y = "Pup Wean Mass (Kg)") +
geom_smooth(method="lm", se=F)
ggplot(seal_data) + geom_point(aes(seal_data$Dietary.energy.density, seal_data$Pup.Wean.Mass, color = Dominant.prey.species)) +
labs(title = "Pup Wean Mass and Dietary Energy Density", x = "Dietary Energy Density (kJ/g of prey tissue)", y = "Pup Wean Mass (Kg)") +
geom_smooth(method="lm", se=F)
ggplot(seal_data) + geom_point(aes(seal_data$Mom.Age, seal_data$Pup.Wean.Mass)) +
labs(title = "Pup Wean Mass and Maternal Age", x = "Maternal Age", y = "Pup Wean Mass (Kg)") + geom_point() +
geom_smooth(aes(method="lm", se=F)
Q2C = glm (seal_data$Pup.Wean.Mass ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity + seal_data$Dietary.energy.density
Q2C = glm (seal_data$Pup.Wean.Mass ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity + seal_data$Dietary.energy.density
+ seal_data$Mom.Age + seal_data$Pup.sex + seal_data$MomID, data = seal_data, family = gaussian)
summary (Q2C)
Q2C = glm ( data = seal_data, family = gaussian, formula = seal_data$Pup.Wean.Mass ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity + seal_data$Dietary.energy.density
+ seal_data$Mom.Age + seal_data$Pup.sex + seal_data$MomID)
Q2C
ggplot(seal_data) + geom_point(aes(seal_data$Dietary.energy.density, seal_data$Pup.Wean.Mass, color = Dominant.prey.species)) +
labs(title = "Pup Wean Mass and Dietary Energy Density", x = "Dietary Energy Density (kJ/g of prey tissue)", y = "Pup Wean Mass (Kg)") +
geom_smooth(aes(seal_data$Dietary.energy.density, seal_data$Pup.Wean.Mass), method="lm", se=T)
seal_data$Dominant.prey.species = as.factor(seal_data$Dominant.prey.species)
ggplot(seal_data) + geom_point(aes(seal_data$Dietary.energy.density, seal_data$Pup.Wean.Mass, color = Dominant.prey.species)) +
labs(title = "Pup Wean Mass and Dietary Energy Density", x = "Dietary Energy Density (kJ/g of prey tissue)", y = "Pup Wean Mass (Kg)") +
geom_smooth method="lm", se=F)
ggplot(seal_data) + geom_point(aes(seal_data$Dietary.energy.density, seal_data$Pup.Wean.Mass, color = Dominant.prey.species)) +
labs(title = "Pup Wean Mass and Dietary Energy Density", x = "Dietary Energy Density (kJ/g of prey tissue)", y = "Pup Wean Mass (Kg)") +
geom_smooth (method="lm", se=F)
ggplot(seal_data) + geom_point(aes(seal_data$Dietary.energy.density, seal_data$Pup.Wean.Mass, color = Dominant.prey.species)) +
labs(title = "Pup Wean Mass and Dietary Energy Density", x = "Dietary Energy Density (kJ/g of prey tissue)", y = "Pup Wean Mass (Kg)") +
geom_smooth(method="lm", se=F)
ggplot(seal_data) + geom_point(aes(seal_data$Dietary.energy.density, seal_data$Pup.Wean.Mass, color = Dominant.prey.species))
ggplot(seal_data) + geom_point(aes(seal_data$Dietary.energy.density, seal_data$Pup.Wean.Mass, color = Dominant.prey.species)) +
geom_smooth(method="lm", se=F)
ggplot(seal_data) + geom_point(aes(seal_data$Dietary.energy.density, seal_data$Pup.Wean.Mass, color = Dominant.prey.species)) + g geom_point() +
ggplot(seal_data) + geom_point(aes(seal_data$Dietary.energy.density, seal_data$Pup.Wean.Mass, color = Dominant.prey.species)) + g geom_point()
ggplot(seal_data) + geom_point(aes(seal_data$Dietary.energy.density, seal_data$Pup.Wean.Mass, color = Dominant.prey.species)) + geom_point() +
geom_smooth(method="lm", se=F)
ggplot(seal_data) + geom_point(aes(seal_data$Dietary.energy.density, seal_data$Pup.Wean.Mass, color = seal_data$Dominant.prey.species)) + geom_point() +
geom_smooth(method="lm", se=F)
ggplot(seal_data) + geom_point(aes(seal_data$Dietary.energy.density, seal_data$Pup.Wean.Mass, color = seal_data$Dominant.prey.species)) + geom_point() +
geom_smooth(method="lm", se=F)
ggplot(seal_data) + geom_point(aes(seal_data$Dietary.energy.density, seal_data$Pup.Wean.Mass, color = seal_data$Dominant.prey.species))
ggplot(seal_data) + geom_point(aes(seal_data$Dietary.energy.density, seal_data$Pup.Wean.Mass, color = seal_data$Dominant.prey.species (1:5))) + geom_point() +
geom_smooth(method="lm", se=F)
ggplot(seal_data) + geom_point(aes(seal_data$Dietary.energy.density, seal_data$Pup.Wean.Mass, color = seal_data$Dominant.prey.species)) + geom_point() +
geom_smooth(method="lm", se=F, aes= factor(seal_data$Dominant.prey.species))
ggplot(seal_data) + geom_point(aes(Dietary.energy.density, Pup.Wean.Mass, color = Dominant.prey.species)) + geom_point() +
geom_smooth(method="lm", se=F)
geom_smooth(method ="lm", se=F)
ggplot(seal_data) + geom_point(aes(Dietary.energy.density, Pup.Wean.Mass, color = Dominant.prey.species)) + geom_point()
ggplot(seal_data) + geom_point(aes(Dietary.energy.density, Pup.Wean.Mass, color = Dominant.prey.species))
ggplot(seal_data) + geom_point(aes(Dietary.energy.density, Pup.Wean.Mass, color = Dominant.prey.species)) + geom_point() +
geom_smooth(method ="lm", se=F)
ggplot(seal_data) + geom_point(aes(Dietary.energy.density, Pup.Wean.Mass
ggplot(seal_data) + geom_point(aes(Dietary.energy.density, Pup.Wean.Mass, color = Dominant.prey.species)) + geom_point() +
ggplot(seal_data) + geom_point(aes(Dietary.energy.density, Pup.Wean.Mass, color = Dominant.prey.species)) + geom_point() +
geom_smooth(method = "lm" , se=F)
names (seal_data)
ggplot(seal_data) + geom_point(aes(Dietary.energy.density, Pup.Wean.Mass, color = Dominant.prey.species)) + geom_point() +
geom_smooth(method = "lm" , se=F)
ggplot(seal_data) + geom_point(aes(Dietary.energy.density, Pup.Wean.Mass, color = Dominant.prey.species))
seal_data = read.csv("Data_Q2.csv", header = T)
summary(seal_data)
seal_data
ggplot(seal_data) + geom_point(aes(Dietary.energy.density, Pup.Wean.Mass, color = Dominant.prey.species))
ggplot(seal_data) + geom_point(aes(Dietary.energy.density, Pup.Wean.Mass, color = Dominant.prey.species)) + geom_point() +
geom_smooth(method = "lm" , se=F)
seal_data$MomID = as.factor(seal_data$MomID)
seal_data$Year = as.factor(seal_data$Year)
seal_data$Dominant.prey.species = as.factor(seal_data$Dominant.prey.species)
seal_data$Pup.sex = as.factor(seal_data$Pup.sex)
seal_data$Pup.Mom.Age = as.factor(seal_data$Mom.Age)
nlevels(seal_data$Dominant.prey.species)
ggplot(seal_data) + geom_point(aes(Dietary.energy.density, Pup.Wean.Mass, color = Dominant.prey.species)) + geom_point() +
geom_smooth(method = "lm" , se=F)
ggplot(seal_data) + geom_point(aes(Dietary.energy.density, Pup.Wean.Mass, color = Dominant.prey.species)) + geom_point()
ggplot(seal_data) + geom_point(aes(Dietary.energy.density, Pup.Wean.Mass, color = Dominant.prey.species)) + geom_point() +
geom_smooth(method = "lm" , se=F) + theme_minimal()
ggplot(seal_data) + geom_point(aes(seal_data$Diet.diversity, seal_data$Pup.Wean.Mass, color = seal_data$MomID)) +
labs(title = "Pup Wean Mass and Diet Diversity", x = "Diet Diveristy (no specific units for Shannon index)", y = "Pup Wean Mass (Kg)") +
geom_smooth( method="lm", se=T)
seal_data = read.csv("Data_Q2.csv", header = T)
setwd("~/Desktop/IDPhD Classes/Stat 5620/Final Project/Proposal Presentation/Working Folder/Final Assignment/Processed_Data")
seal_data = read.csv("Data_Q2.csv", header = T)
summary(seal_data)
seal_data$MomID = as.factor(seal_data$MomID)
seal_data$Year = as.factor(seal_data$Year)
seal_data$Dominant.prey.species = as.factor(seal_data$Dominant.prey.species)
seal_data$Pup.sex = as.factor(seal_data$Pup.sex)
seal_data$Pup.Mom.Age = as.factor(seal_data$Mom.Age)
GLMM_G = glmer(Pup.Wean.Mass ~  Dietary.energy.density + Dominant.prey.species + (Dominant.prey.species | Pup.Wean.Mass) ,
data = seal_data, family = gaussian)
require(lme4)
GLMM_G = glmer(Pup.Wean.Mass ~  Dietary.energy.density + Dominant.prey.species + (Dominant.prey.species | Pup.Wean.Mass) ,
data = seal_data, family = gaussian)
GLMM_G = glmer(Pup.Wean.Mass ~  Dietary.energy.density + Dominant.prey.species + (Dominant.prey.species | Pup.Wean.Mass) ,
data = seal_data, family = gaussian)
GLMM_G = glmer(Pup.Wean.Mass ~  Dietary.energy.density + Dominant.prey.species + (Dominant.prey.species | Dietary.energy.density) ,
data = seal_data, family = gaussian)
=======
Gaus = glm (seal_data$Mass.change ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity + seal_data$Dietary.energy.density
+ seal_data$Year + seal_data$MomID, data = seal_data, family = gaussian)
Gaus = glm (seal_data$Mass.change ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity + seal_data$Dietary.energy.density
+ seal_data$Year + seal_data$MomID, data = seal_data, family = gaussian)
summary (Gaus)
fwd.model = step(Gaus, direction='forward')
backward.model = step(Gaus, direction='backward')
Q1_A = glm (seal_data$Mass.change ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity +
+ seal_data$Year, data = seal_data, family = gaussian)
summary (Q1_A)
plot (Q1_A)
Gaus_mixed_full = glmer(Mass.change ~ Dominant.prey.species + Diet.diversity
+ (1 | Year) + (1 | MomID), data = seal_data, family = gaussian)
Gaus_mixed_full = glmer(Mass.change ~ Dominant.prey.species + Diet.diversity +
(1 | Year), data = seal_data, family = gaussian)
Gaus_mixed_full = glmer(Mass.change ~ Dominant.prey.species + Diet.diversity +
(1 | Year) + (1 | MomID), data = seal_data, family = gaussian)
summary(Gaus_mixed_full)
Gaus_mixed_full_2 = glmer(Mass.change ~ Dominant.prey.species + Diet.diversity +
(1 | Year), data = seal_data, family = gaussian)
summary (Gaus_mixed_full_2)
summary (Gaus_mixed_full_1)
summary (Gaus_mixed_full_2)
compare.fits(seal_data$Mass.change ~ seal_data$Dominant.prey.species + seal_data$Diet.diversity +
+ seal_data$Year, Q1_A, Q1 )
model.comparison(Q1, Q1_A )
model.comparison(Q1, Q1_A, Gaus_mixed_full_2 )
model.comparison(Q1, Gaus_mixed_full_2 )
model.comparison(Q, Q1)
model.comparison(Q1_A, Gaus_mixed_full_2 )
model.comparison(Gaus_mixed_full_1, Gaus_mixed_full_2 )
Gaus_mixed_full_1 = glmer(Mass.change ~ Dominant.prey.species + Diet.diversity +
(1 | Year) + (1 | MomID), data = seal_data, family = gaussian)
model.comparison(Gaus_mixed_full_1, Gaus_mixed_full_2 )
model.comparison(Q1, Q1_A)
model.comparison(Q1_A, Gaus_mixed_full_2 )
?"compair.fits"
?"compare.fits"
compare.fits(Mass.change ~ Dominant.prey.species + Diet.diversity +
(1 | Year), data = seal_data, Gaus_mixed_full_2, Q1_A)
compare.fits(Mass.change ~ Dominant.prey.species + Diet.diversity +
(1 | Year), data = seal_data, Gaus_mixed_full_2, Gaus_mixed_full1)
compare.fits(Mass.change ~ Dominant.prey.species + Diet.diversity +
(1 | Year), data = seal_data, Gaus_mixed_full_2, Gaus_mixed_full_1)
model.comparison(Q1_A, Gaus_mixed_full_2 )
backward.model = step(Gaus, direction='backward')
>>>>>>> 6fa4d2695ddb1a93a13a7f0f23c551a2debd4b79
>>>>>>> 0e2f625240145a12b5416285ff79419ddfe67981
